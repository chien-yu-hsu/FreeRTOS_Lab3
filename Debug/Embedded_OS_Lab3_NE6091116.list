
Embedded_OS_Lab3_NE6091116.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005640  08005640  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005648  08005648  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005648  08005648  00015648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800564c  0800564c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f08  20000010  08005660  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f18  08005660  00022f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131e7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000288d  00000000  00000000  00033227  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001028  00000000  00000000  00035ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00036ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021d70  00000000  00000000  000379e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d358  00000000  00000000  00059750  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cffcd  00000000  00000000  00066aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136a75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b0  00000000  00000000  00136af0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005554 	.word	0x08005554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005554 	.word	0x08005554

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa91 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f83f 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8c5 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f899 	bl	8000628 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(Red_LED_App,"Red_LEDTask",130,(void *)NULL,1,NULL);
 80004f6:	2300      	movs	r3, #0
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2282      	movs	r2, #130	; 0x82
 8000502:	4912      	ldr	r1, [pc, #72]	; (800054c <main+0x6c>)
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <main+0x70>)
 8000506:	f002 fe1b 	bl	8003140 <xTaskCreate>
  xTaskCreate(Green_LED_App,"Green_LEDTask",130,(void *)NULL,1,NULL);
 800050a:	2300      	movs	r3, #0
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2282      	movs	r2, #130	; 0x82
 8000516:	490f      	ldr	r1, [pc, #60]	; (8000554 <main+0x74>)
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x78>)
 800051a:	f002 fe11 	bl	8003140 <xTaskCreate>
  xTaskCreate(TaskMonitor_App,"TaskMonitor",130,(void *)NULL,2,NULL);
 800051e:	2300      	movs	r3, #0
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2302      	movs	r3, #2
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2282      	movs	r2, #130	; 0x82
 800052a:	490c      	ldr	r1, [pc, #48]	; (800055c <main+0x7c>)
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x80>)
 800052e:	f002 fe07 	bl	8003140 <xTaskCreate>
  xTaskCreate(Delay_App,"Task_delay",130,(void *)NULL,14,NULL);
 8000532:	2300      	movs	r3, #0
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	230e      	movs	r3, #14
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	2282      	movs	r2, #130	; 0x82
 800053e:	4909      	ldr	r1, [pc, #36]	; (8000564 <main+0x84>)
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x88>)
 8000542:	f002 fdfd 	bl	8003140 <xTaskCreate>
  vTaskStartScheduler();
 8000546:	f002 ff6d 	bl	8003424 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x6a>
 800054c:	0800556c 	.word	0x0800556c
 8000550:	08000705 	.word	0x08000705
 8000554:	08005578 	.word	0x08005578
 8000558:	08000731 	.word	0x08000731
 800055c:	08005588 	.word	0x08005588
 8000560:	0800075d 	.word	0x0800075d
 8000564:	08005594 	.word	0x08005594
 8000568:	0800077d 	.word	0x0800077d

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 ffbd 	bl	80054fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xb4>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xb4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <SystemClock_Config+0xb8>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <SystemClock_Config+0xb8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fd07 	bl	8000ff0 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e8:	f000 f8e4 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f000 ff62 	bl	80014d0 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000612:	f000 f8cf 	bl	80007b4 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f001 fb72 	bl	8001d48 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f8a3 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20012e54 	.word	0x20012e54
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_GPIO_Init+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_GPIO_Init+0x80>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_GPIO_Init+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_GPIO_Init+0x80>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <MX_GPIO_Init+0x80>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_GPIO_Init+0x80>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x84>)
 80006d2:	f000 fc59 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 80006d6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0x84>)
 80006f0:	f000 fab0 	bl	8000c54 <HAL_GPIO_Init>

}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020c00 	.word	0x40020c00

08000704 <Red_LED_App>:

/* USER CODE BEGIN 4 */
void Red_LED_App(void *pvParameters){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 500;
 800070c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000710:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <Red_LED_App+0x28>)
 8000718:	f000 fc4f 	bl	8000fba <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f002 fe4d 	bl	80033bc <vTaskDelay>
		Redtimer += 1;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000728:	e7f3      	b.n	8000712 <Red_LED_App+0xe>
 800072a:	bf00      	nop
 800072c:	40020c00 	.word	0x40020c00

08000730 <Green_LED_App>:
	}
}

void Green_LED_App(void *pvParameters){
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 800073e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <Green_LED_App+0x28>)
 8000744:	f000 fc39 	bl	8000fba <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f002 fe37 	bl	80033bc <vTaskDelay>
		Greentimer += 2;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3302      	adds	r3, #2
 8000752:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000754:	e7f3      	b.n	800073e <Green_LED_App+0xe>
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <TaskMonitor_App>:
	}
}

void TaskMonitor_App(void *pvParameters){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

		uint8_t i = 100;
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	73fb      	strb	r3, [r7, #15]
		  for(;;)
		  {
			  	Taskmonitor();
 8000768:	f003 fb62 	bl	8003e30 <Taskmonitor>
			  	i +=  1;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
			  	vTaskDelay(i);
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fe21 	bl	80033bc <vTaskDelay>
			  	Taskmonitor();
 800077a:	e7f5      	b.n	8000768 <TaskMonitor_App+0xc>

0800077c <Delay_App>:
					i = 0 ;
		  }

}

void Delay_App(void *pvParameters){
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	while(1){
		vTaskDelay(15000);
 8000784:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000788:	f002 fe18 	bl	80033bc <vTaskDelay>
 800078c:	e7fa      	b.n	8000784 <Delay_App+0x8>
	...

08000790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d101      	bne.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a2:	f000 f955 	bl	8000a50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40001000 	.word	0x40001000

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ba:	e7fe      	b.n	80007ba <Error_Handler+0x6>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a19      	ldr	r2, [pc, #100]	; (8000890 <HAL_UART_MspInit+0x84>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d12b      	bne.n	8000886 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_UART_MspInit+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000866:	230c      	movs	r3, #12
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000876:	2307      	movs	r3, #7
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <HAL_UART_MspInit+0x8c>)
 8000882:	f000 f9e7 	bl	8000c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40004400 	.word	0x40004400
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000

0800089c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	2036      	movs	r0, #54	; 0x36
 80008b2:	f000 f9a5 	bl	8000c00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b6:	2036      	movs	r0, #54	; 0x36
 80008b8:	f000 f9be 	bl	8000c38 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <HAL_InitTick+0xa0>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <HAL_InitTick+0xa0>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <HAL_InitTick+0xa0>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d8:	f107 0210 	add.w	r2, r7, #16
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 ffc0 	bl	8001868 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008e8:	f000 ff96 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 80008ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <HAL_InitTick+0xa4>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	0c9b      	lsrs	r3, r3, #18
 80008f8:	3b01      	subs	r3, #1
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_InitTick+0xa8>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <HAL_InitTick+0xac>)
 8000900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_InitTick+0xa8>)
 8000904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000908:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_InitTick+0xa8>)
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_InitTick+0xa8>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_InitTick+0xa8>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_InitTick+0xa8>)
 800091e:	f000 ffd5 	bl	80018cc <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d104      	bne.n	8000932 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <HAL_InitTick+0xa8>)
 800092a:	f001 f804 	bl	8001936 <HAL_TIM_Base_Start_IT>
 800092e:	4603      	mov	r3, r0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3730      	adds	r7, #48	; 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	431bde83 	.word	0x431bde83
 8000944:	20012e94 	.word	0x20012e94
 8000948:	40001000 	.word	0x40001000

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <TIM6_DAC_IRQHandler+0x10>)
 800097e:	f000 fffe 	bl	800197e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20012e94 	.word	0x20012e94

0800098c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <SystemInit+0x28>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <SystemInit+0x28>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SystemInit+0x28>)
 80009a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009a6:	609a      	str	r2, [r3, #8]
#endif
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009be:	e003      	b.n	80009c8 <LoopCopyDataInit>

080009c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009c6:	3104      	adds	r1, #4

080009c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009d0:	d3f6      	bcc.n	80009c0 <CopyDataInit>
  ldr  r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009d4:	e002      	b.n	80009dc <LoopFillZerobss>

080009d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009d8:	f842 3b04 	str.w	r3, [r2], #4

080009dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009e0:	d3f9      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009e2:	f7ff ffd3 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f004 fd59 	bl	800549c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fd79 	bl	80004e0 <main>
  bx  lr    
 80009ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009f4:	08005650 	.word	0x08005650
  ldr  r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009fc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a00:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a04:	20012f18 	.word	0x20012f18

08000a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_Init+0x40>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_Init+0x40>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x40>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f8d8 	bl	8000bea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ff2e 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff febc 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023c00 	.word	0x40023c00

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20012ed4 	.word	0x20012ed4

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20012ed4 	.word	0x20012ed4

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4907      	ldr	r1, [pc, #28]	; (8000b2c <__NVIC_EnableIRQ+0x38>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	; (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	; (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	; 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ff4c 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c12:	f7ff ff61 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	68b9      	ldr	r1, [r7, #8]
 8000c1c:	6978      	ldr	r0, [r7, #20]
 8000c1e:	f7ff ffb1 	bl	8000b84 <NVIC_EncodePriority>
 8000c22:	4602      	mov	r2, r0
 8000c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff80 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff54 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	e16b      	b.n	8000f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c70:	2201      	movs	r2, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	f040 815a 	bne.w	8000f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d00b      	beq.n	8000cae <HAL_GPIO_Init+0x5a>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d007      	beq.n	8000cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca2:	2b11      	cmp	r3, #17
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	d130      	bne.n	8000d10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	091b      	lsrs	r3, r3, #4
 8000cfa:	f003 0201 	and.w	r2, r3, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0xfc>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b12      	cmp	r3, #18
 8000d4e:	d123      	bne.n	8000d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	69b9      	ldr	r1, [r7, #24]
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0203 	and.w	r2, r3, #3
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80b4 	beq.w	8000f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b5f      	ldr	r3, [pc, #380]	; (8000f5c <HAL_GPIO_Init+0x308>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a5e      	ldr	r2, [pc, #376]	; (8000f5c <HAL_GPIO_Init+0x308>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b5c      	ldr	r3, [pc, #368]	; (8000f5c <HAL_GPIO_Init+0x308>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df6:	4a5a      	ldr	r2, [pc, #360]	; (8000f60 <HAL_GPIO_Init+0x30c>)
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a51      	ldr	r2, [pc, #324]	; (8000f64 <HAL_GPIO_Init+0x310>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d02b      	beq.n	8000e7a <HAL_GPIO_Init+0x226>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a50      	ldr	r2, [pc, #320]	; (8000f68 <HAL_GPIO_Init+0x314>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d025      	beq.n	8000e76 <HAL_GPIO_Init+0x222>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4f      	ldr	r2, [pc, #316]	; (8000f6c <HAL_GPIO_Init+0x318>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d01f      	beq.n	8000e72 <HAL_GPIO_Init+0x21e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4e      	ldr	r2, [pc, #312]	; (8000f70 <HAL_GPIO_Init+0x31c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d019      	beq.n	8000e6e <HAL_GPIO_Init+0x21a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4d      	ldr	r2, [pc, #308]	; (8000f74 <HAL_GPIO_Init+0x320>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <HAL_GPIO_Init+0x216>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <HAL_GPIO_Init+0x324>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00d      	beq.n	8000e66 <HAL_GPIO_Init+0x212>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4b      	ldr	r2, [pc, #300]	; (8000f7c <HAL_GPIO_Init+0x328>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x20e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4a      	ldr	r2, [pc, #296]	; (8000f80 <HAL_GPIO_Init+0x32c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_GPIO_Init+0x20a>
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	e00e      	b.n	8000e7c <HAL_GPIO_Init+0x228>
 8000e5e:	2308      	movs	r3, #8
 8000e60:	e00c      	b.n	8000e7c <HAL_GPIO_Init+0x228>
 8000e62:	2306      	movs	r3, #6
 8000e64:	e00a      	b.n	8000e7c <HAL_GPIO_Init+0x228>
 8000e66:	2305      	movs	r3, #5
 8000e68:	e008      	b.n	8000e7c <HAL_GPIO_Init+0x228>
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x228>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e004      	b.n	8000e7c <HAL_GPIO_Init+0x228>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e002      	b.n	8000e7c <HAL_GPIO_Init+0x228>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x228>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	f002 0203 	and.w	r2, r2, #3
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4093      	lsls	r3, r2
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e8c:	4934      	ldr	r1, [pc, #208]	; (8000f60 <HAL_GPIO_Init+0x30c>)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9a:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ebe:	4a31      	ldr	r2, [pc, #196]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ec4:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_GPIO_Init+0x330>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	2b0f      	cmp	r3, #15
 8000f4c:	f67f ae90 	bls.w	8000c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f50:	bf00      	nop
 8000f52:	3724      	adds	r7, #36	; 0x24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40021400 	.word	0x40021400
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40021c00 	.word	0x40021c00
 8000f84:	40013c00 	.word	0x40013c00

08000f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f98:	787b      	ldrb	r3, [r7, #1]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa4:	e003      	b.n	8000fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	041a      	lsls	r2, r3, #16
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	619a      	str	r2, [r3, #24]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	401a      	ands	r2, r3
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d104      	bne.n	8000fde <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	041a      	lsls	r2, r3, #16
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e25b      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d075      	beq.n	80010fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100e:	4ba3      	ldr	r3, [pc, #652]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b04      	cmp	r3, #4
 8001018:	d00c      	beq.n	8001034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001022:	2b08      	cmp	r3, #8
 8001024:	d112      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001026:	4b9d      	ldr	r3, [pc, #628]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001032:	d10b      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	4b99      	ldr	r3, [pc, #612]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d05b      	beq.n	80010f8 <HAL_RCC_OscConfig+0x108>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d157      	bne.n	80010f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e236      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001054:	d106      	bne.n	8001064 <HAL_RCC_OscConfig+0x74>
 8001056:	4b91      	ldr	r3, [pc, #580]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a90      	ldr	r2, [pc, #576]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800105c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e01d      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x98>
 800106e:	4b8b      	ldr	r3, [pc, #556]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a8a      	ldr	r2, [pc, #552]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b88      	ldr	r3, [pc, #544]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a87      	ldr	r2, [pc, #540]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e00b      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001088:	4b84      	ldr	r3, [pc, #528]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a83      	ldr	r2, [pc, #524]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800108e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a80      	ldr	r2, [pc, #512]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d013      	beq.n	80010d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fce6 	bl	8000a78 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fce2 	bl	8000a78 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e1fb      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	4b76      	ldr	r3, [pc, #472]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0xc0>
 80010ce:	e014      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcd2 	bl	8000a78 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fcce 	bl	8000a78 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e1e7      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	4b6c      	ldr	r3, [pc, #432]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0xe8>
 80010f6:	e000      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d063      	beq.n	80011ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001106:	4b65      	ldr	r3, [pc, #404]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001112:	4b62      	ldr	r3, [pc, #392]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d11c      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111e:	4b5f      	ldr	r3, [pc, #380]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d116      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	4b5c      	ldr	r3, [pc, #368]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d001      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e1bb      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001142:	4b56      	ldr	r3, [pc, #344]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4952      	ldr	r1, [pc, #328]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001152:	4313      	orrs	r3, r2
 8001154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001156:	e03a      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d020      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001160:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_RCC_OscConfig+0x2b0>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fc87 	bl	8000a78 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fc83 	bl	8000a78 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e19c      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b43      	ldr	r3, [pc, #268]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4940      	ldr	r1, [pc, #256]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <HAL_RCC_OscConfig+0x2b0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc66 	bl	8000a78 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc62 	bl	8000a78 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e17b      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d030      	beq.n	800123c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d016      	beq.n	8001210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <HAL_RCC_OscConfig+0x2b4>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fc46 	bl	8000a78 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc42 	bl	8000a78 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e15b      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x200>
 800120e:	e015      	b.n	800123c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_OscConfig+0x2b4>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fc2f 	bl	8000a78 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff fc2b 	bl	8000a78 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e144      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f0      	bne.n	800121e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a0 	beq.w	800138a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001276:	2301      	movs	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_OscConfig+0x2b8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d121      	bne.n	80012ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_RCC_OscConfig+0x2b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_RCC_OscConfig+0x2b8>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001292:	f7ff fbf1 	bl	8000a78 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	e011      	b.n	80012be <HAL_RCC_OscConfig+0x2ce>
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	42470000 	.word	0x42470000
 80012a4:	42470e80 	.word	0x42470e80
 80012a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ac:	f7ff fbe4 	bl	8000a78 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e0fd      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x4d4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
 80012d2:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d6:	4a7c      	ldr	r2, [pc, #496]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6713      	str	r3, [r2, #112]	; 0x70
 80012de:	e01c      	b.n	800131a <HAL_RCC_OscConfig+0x32a>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d10c      	bne.n	8001302 <HAL_RCC_OscConfig+0x312>
 80012e8:	4b77      	ldr	r3, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a76      	ldr	r2, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
 80012f4:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	4a73      	ldr	r2, [pc, #460]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001300:	e00b      	b.n	800131a <HAL_RCC_OscConfig+0x32a>
 8001302:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001306:	4a70      	ldr	r2, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6713      	str	r3, [r2, #112]	; 0x70
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	4a6d      	ldr	r2, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d015      	beq.n	800134e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001322:	f7ff fba9 	bl	8000a78 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001328:	e00a      	b.n	8001340 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132a:	f7ff fba5 	bl	8000a78 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f241 3288 	movw	r2, #5000	; 0x1388
 8001338:	4293      	cmp	r3, r2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0bc      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0ee      	beq.n	800132a <HAL_RCC_OscConfig+0x33a>
 800134c:	e014      	b.n	8001378 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fb93 	bl	8000a78 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff fb8f 	bl	8000a78 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f241 3288 	movw	r2, #5000	; 0x1388
 8001364:	4293      	cmp	r3, r2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0a6      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1ee      	bne.n	8001356 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d105      	bne.n	800138a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a51      	ldr	r2, [pc, #324]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8092 	beq.w	80014b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001394:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d05c      	beq.n	800145a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d141      	bne.n	800142c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a8:	4b48      	ldr	r3, [pc, #288]	; (80014cc <HAL_RCC_OscConfig+0x4dc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb63 	bl	8000a78 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff fb5f 	bl	8000a78 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e078      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c8:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69da      	ldr	r2, [r3, #28]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	019b      	lsls	r3, r3, #6
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	3b01      	subs	r3, #1
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	061b      	lsls	r3, r3, #24
 80013f8:	4933      	ldr	r1, [pc, #204]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <HAL_RCC_OscConfig+0x4dc>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fb38 	bl	8000a78 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fb34 	bl	8000a78 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e04d      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x41c>
 800142a:	e045      	b.n	80014b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_RCC_OscConfig+0x4dc>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fb21 	bl	8000a78 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143a:	f7ff fb1d 	bl	8000a78 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e036      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x44a>
 8001458:	e02e      	b.n	80014b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e029      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	429a      	cmp	r2, r3
 8001478:	d11c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d115      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800148e:	4013      	ands	r3, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001494:	4293      	cmp	r3, r2
 8001496:	d10d      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470060 	.word	0x42470060

080014d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0cc      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d90c      	bls.n	800150c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0b8      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001524:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800152e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a52      	ldr	r2, [pc, #328]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	494d      	ldr	r1, [pc, #308]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d044      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d119      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e07f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	2b03      	cmp	r3, #3
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158e:	4b3f      	ldr	r3, [pc, #252]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e067      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 0203 	bic.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4934      	ldr	r1, [pc, #208]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c0:	f7ff fa5a 	bl	8000a78 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	e00a      	b.n	80015de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7ff fa56 	bl	8000a78 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e04f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 020c 	and.w	r2, r3, #12
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1eb      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d20c      	bcs.n	8001618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e032      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4916      	ldr	r1, [pc, #88]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	490e      	ldr	r1, [pc, #56]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001656:	f000 f821 	bl	800169c <HAL_RCC_GetSysClockFreq>
 800165a:	4601      	mov	r1, r0
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	fa21 f303 	lsr.w	r3, r1, r3
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_ClockConfig+0x1c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f910 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00
 800168c:	40023800 	.word	0x40023800
 8001690:	08005628 	.word	0x08005628
 8001694:	20000000 	.word	0x20000000
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b2:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d007      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0x32>
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d008      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x38>
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 808d 	bne.w	80017e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b4b      	ldr	r3, [pc, #300]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016ca:	60bb      	str	r3, [r7, #8]
       break;
 80016cc:	e08c      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ce:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <HAL_RCC_GetSysClockFreq+0x160>)
 80016d0:	60bb      	str	r3, [r7, #8]
      break;
 80016d2:	e089      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016de:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d023      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ea:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	ea03 0501 	and.w	r5, r3, r1
 8001700:	ea04 0602 	and.w	r6, r4, r2
 8001704:	4a3d      	ldr	r2, [pc, #244]	; (80017fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001706:	fb02 f106 	mul.w	r1, r2, r6
 800170a:	2200      	movs	r2, #0
 800170c:	fb02 f205 	mul.w	r2, r2, r5
 8001710:	440a      	add	r2, r1
 8001712:	493a      	ldr	r1, [pc, #232]	; (80017fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001714:	fba5 0101 	umull	r0, r1, r5, r1
 8001718:	1853      	adds	r3, r2, r1
 800171a:	4619      	mov	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f04f 0400 	mov.w	r4, #0
 8001722:	461a      	mov	r2, r3
 8001724:	4623      	mov	r3, r4
 8001726:	f7fe fd5b 	bl	80001e0 <__aeabi_uldivmod>
 800172a:	4603      	mov	r3, r0
 800172c:	460c      	mov	r4, r1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e049      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	099b      	lsrs	r3, r3, #6
 8001738:	f04f 0400 	mov.w	r4, #0
 800173c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	ea03 0501 	and.w	r5, r3, r1
 8001748:	ea04 0602 	and.w	r6, r4, r2
 800174c:	4629      	mov	r1, r5
 800174e:	4632      	mov	r2, r6
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	0154      	lsls	r4, r2, #5
 800175a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	4619      	mov	r1, r3
 8001762:	4622      	mov	r2, r4
 8001764:	1b49      	subs	r1, r1, r5
 8001766:	eb62 0206 	sbc.w	r2, r2, r6
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	0194      	lsls	r4, r2, #6
 8001774:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	1a5b      	subs	r3, r3, r1
 800177c:	eb64 0402 	sbc.w	r4, r4, r2
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	00e2      	lsls	r2, r4, #3
 800178a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800178e:	00d9      	lsls	r1, r3, #3
 8001790:	460b      	mov	r3, r1
 8001792:	4614      	mov	r4, r2
 8001794:	195b      	adds	r3, r3, r5
 8001796:	eb44 0406 	adc.w	r4, r4, r6
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	02a2      	lsls	r2, r4, #10
 80017a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017a8:	0299      	lsls	r1, r3, #10
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	4621      	mov	r1, r4
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7fe fd10 	bl	80001e0 <__aeabi_uldivmod>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	3301      	adds	r3, #1
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	60bb      	str	r3, [r7, #8]
      break;
 80017e0:	e002      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017e4:	60bb      	str	r3, [r7, #8]
      break;
 80017e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e8:	68bb      	ldr	r3, [r7, #8]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	00f42400 	.word	0x00f42400
 80017fc:	017d7840 	.word	0x017d7840

08001800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_RCC_GetHCLKFreq+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000000 	.word	0x20000000

08001818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800181c:	f7ff fff0 	bl	8001800 <HAL_RCC_GetHCLKFreq>
 8001820:	4601      	mov	r1, r0
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0a9b      	lsrs	r3, r3, #10
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_RCC_GetPCLK1Freq+0x24>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	08005638 	.word	0x08005638

08001840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001844:	f7ff ffdc 	bl	8001800 <HAL_RCC_GetHCLKFreq>
 8001848:	4601      	mov	r1, r0
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	0b5b      	lsrs	r3, r3, #13
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	4a03      	ldr	r2, [pc, #12]	; (8001864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	fa21 f303 	lsr.w	r3, r1, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	08005638 	.word	0x08005638

08001868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	220f      	movs	r2, #15
 8001876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_RCC_GetClockConfig+0x60>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 020f 	and.w	r2, r3, #15
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	601a      	str	r2, [r3, #0]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e01d      	b.n	800191a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f815 	bl	8001922 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3304      	adds	r3, #4
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f000 f968 	bl	8001be0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b06      	cmp	r3, #6
 800195e:	d007      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b02      	cmp	r3, #2
 8001992:	d122      	bne.n	80019da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d11b      	bne.n	80019da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f06f 0202 	mvn.w	r2, #2
 80019aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f8ee 	bl	8001ba2 <HAL_TIM_IC_CaptureCallback>
 80019c6:	e005      	b.n	80019d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f8e0 	bl	8001b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f8f1 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d122      	bne.n	8001a2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d11b      	bne.n	8001a2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f06f 0204 	mvn.w	r2, #4
 80019fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8c4 	bl	8001ba2 <HAL_TIM_IC_CaptureCallback>
 8001a1a:	e005      	b.n	8001a28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f8b6 	bl	8001b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f8c7 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d122      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d11b      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 0208 	mvn.w	r2, #8
 8001a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2204      	movs	r2, #4
 8001a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f89a 	bl	8001ba2 <HAL_TIM_IC_CaptureCallback>
 8001a6e:	e005      	b.n	8001a7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f88c 	bl	8001b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f89d 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d122      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0210 	mvn.w	r2, #16
 8001aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2208      	movs	r2, #8
 8001aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f870 	bl	8001ba2 <HAL_TIM_IC_CaptureCallback>
 8001ac2:	e005      	b.n	8001ad0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f862 	bl	8001b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f873 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10e      	bne.n	8001b02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f06f 0201 	mvn.w	r2, #1
 8001afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7fe fe47 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0c:	2b80      	cmp	r3, #128	; 0x80
 8001b0e:	d10e      	bne.n	8001b2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1a:	2b80      	cmp	r3, #128	; 0x80
 8001b1c:	d107      	bne.n	8001b2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f903 	bl	8001d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b38:	2b40      	cmp	r3, #64	; 0x40
 8001b3a:	d10e      	bne.n	8001b5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b46:	2b40      	cmp	r3, #64	; 0x40
 8001b48:	d107      	bne.n	8001b5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f838 	bl	8001bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	d10e      	bne.n	8001b86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d107      	bne.n	8001b86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0220 	mvn.w	r2, #32
 8001b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8cd 	bl	8001d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a40      	ldr	r2, [pc, #256]	; (8001cf4 <TIM_Base_SetConfig+0x114>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfe:	d00f      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3d      	ldr	r2, [pc, #244]	; (8001cf8 <TIM_Base_SetConfig+0x118>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00b      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3c      	ldr	r2, [pc, #240]	; (8001cfc <TIM_Base_SetConfig+0x11c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a3b      	ldr	r2, [pc, #236]	; (8001d00 <TIM_Base_SetConfig+0x120>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d003      	beq.n	8001c20 <TIM_Base_SetConfig+0x40>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a3a      	ldr	r2, [pc, #232]	; (8001d04 <TIM_Base_SetConfig+0x124>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d108      	bne.n	8001c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a2f      	ldr	r2, [pc, #188]	; (8001cf4 <TIM_Base_SetConfig+0x114>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02b      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c40:	d027      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a2c      	ldr	r2, [pc, #176]	; (8001cf8 <TIM_Base_SetConfig+0x118>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d023      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <TIM_Base_SetConfig+0x11c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a2a      	ldr	r2, [pc, #168]	; (8001d00 <TIM_Base_SetConfig+0x120>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01b      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <TIM_Base_SetConfig+0x124>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d017      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a28      	ldr	r2, [pc, #160]	; (8001d08 <TIM_Base_SetConfig+0x128>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a27      	ldr	r2, [pc, #156]	; (8001d0c <TIM_Base_SetConfig+0x12c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00f      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <TIM_Base_SetConfig+0x130>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00b      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a25      	ldr	r2, [pc, #148]	; (8001d14 <TIM_Base_SetConfig+0x134>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <TIM_Base_SetConfig+0x138>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d003      	beq.n	8001c92 <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <TIM_Base_SetConfig+0x13c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d108      	bne.n	8001ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <TIM_Base_SetConfig+0x114>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d003      	beq.n	8001cd8 <TIM_Base_SetConfig+0xf8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <TIM_Base_SetConfig+0x124>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d103      	bne.n	8001ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	615a      	str	r2, [r3, #20]
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	40000800 	.word	0x40000800
 8001d00:	40000c00 	.word	0x40000c00
 8001d04:	40010400 	.word	0x40010400
 8001d08:	40014000 	.word	0x40014000
 8001d0c:	40014400 	.word	0x40014400
 8001d10:	40014800 	.word	0x40014800
 8001d14:	40001800 	.word	0x40001800
 8001d18:	40001c00 	.word	0x40001c00
 8001d1c:	40002000 	.word	0x40002000

08001d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e03f      	b.n	8001dda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7fe fd4c 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	; 0x24
 8001d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f90b 	bl	8001fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b088      	sub	sp, #32
 8001de6:	af02      	add	r7, sp, #8
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	f040 8083 	bne.w	8001f0a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_UART_Transmit+0x2e>
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e07b      	b.n	8001f0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_UART_Transmit+0x40>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e074      	b.n	8001f0c <HAL_UART_Transmit+0x12a>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2221      	movs	r2, #33	; 0x21
 8001e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e38:	f7fe fe1e 	bl	8000a78 <HAL_GetTick>
 8001e3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	88fa      	ldrh	r2, [r7, #6]
 8001e42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	88fa      	ldrh	r2, [r7, #6]
 8001e48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e52:	e042      	b.n	8001eda <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6a:	d122      	bne.n	8001eb2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2200      	movs	r2, #0
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f84c 	bl	8001f14 <UART_WaitOnFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e042      	b.n	8001f0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e98:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d103      	bne.n	8001eaa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	e017      	b.n	8001eda <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3301      	adds	r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	e013      	b.n	8001eda <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f829 	bl	8001f14 <UART_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e01f      	b.n	8001f0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1b7      	bne.n	8001e54 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2140      	movs	r1, #64	; 0x40
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f810 	bl	8001f14 <UART_WaitOnFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e006      	b.n	8001f0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e000      	b.n	8001f0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
  }
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f24:	e02c      	b.n	8001f80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d028      	beq.n	8001f80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f34:	f7fe fda0 	bl	8000a78 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d21d      	bcs.n	8001f80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e00f      	b.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d0c3      	beq.n	8001f26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001fea:	f023 030c 	bic.w	r3, r3, #12
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002016:	f040 818b 	bne.w	8002330 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4ac1      	ldr	r2, [pc, #772]	; (8002324 <UART_SetConfig+0x37c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d005      	beq.n	8002030 <UART_SetConfig+0x88>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4abf      	ldr	r2, [pc, #764]	; (8002328 <UART_SetConfig+0x380>)
 800202a:	4293      	cmp	r3, r2
 800202c:	f040 80bd 	bne.w	80021aa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002030:	f7ff fc06 	bl	8001840 <HAL_RCC_GetPCLK2Freq>
 8002034:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	461d      	mov	r5, r3
 800203a:	f04f 0600 	mov.w	r6, #0
 800203e:	46a8      	mov	r8, r5
 8002040:	46b1      	mov	r9, r6
 8002042:	eb18 0308 	adds.w	r3, r8, r8
 8002046:	eb49 0409 	adc.w	r4, r9, r9
 800204a:	4698      	mov	r8, r3
 800204c:	46a1      	mov	r9, r4
 800204e:	eb18 0805 	adds.w	r8, r8, r5
 8002052:	eb49 0906 	adc.w	r9, r9, r6
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002062:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002066:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800206a:	4688      	mov	r8, r1
 800206c:	4691      	mov	r9, r2
 800206e:	eb18 0005 	adds.w	r0, r8, r5
 8002072:	eb49 0106 	adc.w	r1, r9, r6
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	461d      	mov	r5, r3
 800207c:	f04f 0600 	mov.w	r6, #0
 8002080:	196b      	adds	r3, r5, r5
 8002082:	eb46 0406 	adc.w	r4, r6, r6
 8002086:	461a      	mov	r2, r3
 8002088:	4623      	mov	r3, r4
 800208a:	f7fe f8a9 	bl	80001e0 <__aeabi_uldivmod>
 800208e:	4603      	mov	r3, r0
 8002090:	460c      	mov	r4, r1
 8002092:	461a      	mov	r2, r3
 8002094:	4ba5      	ldr	r3, [pc, #660]	; (800232c <UART_SetConfig+0x384>)
 8002096:	fba3 2302 	umull	r2, r3, r3, r2
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	461d      	mov	r5, r3
 80020a4:	f04f 0600 	mov.w	r6, #0
 80020a8:	46a9      	mov	r9, r5
 80020aa:	46b2      	mov	sl, r6
 80020ac:	eb19 0309 	adds.w	r3, r9, r9
 80020b0:	eb4a 040a 	adc.w	r4, sl, sl
 80020b4:	4699      	mov	r9, r3
 80020b6:	46a2      	mov	sl, r4
 80020b8:	eb19 0905 	adds.w	r9, r9, r5
 80020bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020d4:	4689      	mov	r9, r1
 80020d6:	4692      	mov	sl, r2
 80020d8:	eb19 0005 	adds.w	r0, r9, r5
 80020dc:	eb4a 0106 	adc.w	r1, sl, r6
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	461d      	mov	r5, r3
 80020e6:	f04f 0600 	mov.w	r6, #0
 80020ea:	196b      	adds	r3, r5, r5
 80020ec:	eb46 0406 	adc.w	r4, r6, r6
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	f7fe f874 	bl	80001e0 <__aeabi_uldivmod>
 80020f8:	4603      	mov	r3, r0
 80020fa:	460c      	mov	r4, r1
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <UART_SetConfig+0x384>)
 8002100:	fba3 1302 	umull	r1, r3, r3, r2
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	2164      	movs	r1, #100	; 0x64
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	3332      	adds	r3, #50	; 0x32
 8002112:	4a86      	ldr	r2, [pc, #536]	; (800232c <UART_SetConfig+0x384>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002120:	4498      	add	r8, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	461d      	mov	r5, r3
 8002126:	f04f 0600 	mov.w	r6, #0
 800212a:	46a9      	mov	r9, r5
 800212c:	46b2      	mov	sl, r6
 800212e:	eb19 0309 	adds.w	r3, r9, r9
 8002132:	eb4a 040a 	adc.w	r4, sl, sl
 8002136:	4699      	mov	r9, r3
 8002138:	46a2      	mov	sl, r4
 800213a:	eb19 0905 	adds.w	r9, r9, r5
 800213e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002142:	f04f 0100 	mov.w	r1, #0
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800214e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002152:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002156:	4689      	mov	r9, r1
 8002158:	4692      	mov	sl, r2
 800215a:	eb19 0005 	adds.w	r0, r9, r5
 800215e:	eb4a 0106 	adc.w	r1, sl, r6
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	461d      	mov	r5, r3
 8002168:	f04f 0600 	mov.w	r6, #0
 800216c:	196b      	adds	r3, r5, r5
 800216e:	eb46 0406 	adc.w	r4, r6, r6
 8002172:	461a      	mov	r2, r3
 8002174:	4623      	mov	r3, r4
 8002176:	f7fe f833 	bl	80001e0 <__aeabi_uldivmod>
 800217a:	4603      	mov	r3, r0
 800217c:	460c      	mov	r4, r1
 800217e:	461a      	mov	r2, r3
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <UART_SetConfig+0x384>)
 8002182:	fba3 1302 	umull	r1, r3, r3, r2
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2164      	movs	r1, #100	; 0x64
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	3332      	adds	r3, #50	; 0x32
 8002194:	4a65      	ldr	r2, [pc, #404]	; (800232c <UART_SetConfig+0x384>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	f003 0207 	and.w	r2, r3, #7
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4442      	add	r2, r8
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	e26f      	b.n	800268a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021aa:	f7ff fb35 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 80021ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	461d      	mov	r5, r3
 80021b4:	f04f 0600 	mov.w	r6, #0
 80021b8:	46a8      	mov	r8, r5
 80021ba:	46b1      	mov	r9, r6
 80021bc:	eb18 0308 	adds.w	r3, r8, r8
 80021c0:	eb49 0409 	adc.w	r4, r9, r9
 80021c4:	4698      	mov	r8, r3
 80021c6:	46a1      	mov	r9, r4
 80021c8:	eb18 0805 	adds.w	r8, r8, r5
 80021cc:	eb49 0906 	adc.w	r9, r9, r6
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021e4:	4688      	mov	r8, r1
 80021e6:	4691      	mov	r9, r2
 80021e8:	eb18 0005 	adds.w	r0, r8, r5
 80021ec:	eb49 0106 	adc.w	r1, r9, r6
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	461d      	mov	r5, r3
 80021f6:	f04f 0600 	mov.w	r6, #0
 80021fa:	196b      	adds	r3, r5, r5
 80021fc:	eb46 0406 	adc.w	r4, r6, r6
 8002200:	461a      	mov	r2, r3
 8002202:	4623      	mov	r3, r4
 8002204:	f7fd ffec 	bl	80001e0 <__aeabi_uldivmod>
 8002208:	4603      	mov	r3, r0
 800220a:	460c      	mov	r4, r1
 800220c:	461a      	mov	r2, r3
 800220e:	4b47      	ldr	r3, [pc, #284]	; (800232c <UART_SetConfig+0x384>)
 8002210:	fba3 2302 	umull	r2, r3, r3, r2
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	461d      	mov	r5, r3
 800221e:	f04f 0600 	mov.w	r6, #0
 8002222:	46a9      	mov	r9, r5
 8002224:	46b2      	mov	sl, r6
 8002226:	eb19 0309 	adds.w	r3, r9, r9
 800222a:	eb4a 040a 	adc.w	r4, sl, sl
 800222e:	4699      	mov	r9, r3
 8002230:	46a2      	mov	sl, r4
 8002232:	eb19 0905 	adds.w	r9, r9, r5
 8002236:	eb4a 0a06 	adc.w	sl, sl, r6
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002246:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800224a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800224e:	4689      	mov	r9, r1
 8002250:	4692      	mov	sl, r2
 8002252:	eb19 0005 	adds.w	r0, r9, r5
 8002256:	eb4a 0106 	adc.w	r1, sl, r6
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	461d      	mov	r5, r3
 8002260:	f04f 0600 	mov.w	r6, #0
 8002264:	196b      	adds	r3, r5, r5
 8002266:	eb46 0406 	adc.w	r4, r6, r6
 800226a:	461a      	mov	r2, r3
 800226c:	4623      	mov	r3, r4
 800226e:	f7fd ffb7 	bl	80001e0 <__aeabi_uldivmod>
 8002272:	4603      	mov	r3, r0
 8002274:	460c      	mov	r4, r1
 8002276:	461a      	mov	r2, r3
 8002278:	4b2c      	ldr	r3, [pc, #176]	; (800232c <UART_SetConfig+0x384>)
 800227a:	fba3 1302 	umull	r1, r3, r3, r2
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2164      	movs	r1, #100	; 0x64
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	3332      	adds	r3, #50	; 0x32
 800228c:	4a27      	ldr	r2, [pc, #156]	; (800232c <UART_SetConfig+0x384>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800229a:	4498      	add	r8, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	461d      	mov	r5, r3
 80022a0:	f04f 0600 	mov.w	r6, #0
 80022a4:	46a9      	mov	r9, r5
 80022a6:	46b2      	mov	sl, r6
 80022a8:	eb19 0309 	adds.w	r3, r9, r9
 80022ac:	eb4a 040a 	adc.w	r4, sl, sl
 80022b0:	4699      	mov	r9, r3
 80022b2:	46a2      	mov	sl, r4
 80022b4:	eb19 0905 	adds.w	r9, r9, r5
 80022b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022d0:	4689      	mov	r9, r1
 80022d2:	4692      	mov	sl, r2
 80022d4:	eb19 0005 	adds.w	r0, r9, r5
 80022d8:	eb4a 0106 	adc.w	r1, sl, r6
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	461d      	mov	r5, r3
 80022e2:	f04f 0600 	mov.w	r6, #0
 80022e6:	196b      	adds	r3, r5, r5
 80022e8:	eb46 0406 	adc.w	r4, r6, r6
 80022ec:	461a      	mov	r2, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	f7fd ff76 	bl	80001e0 <__aeabi_uldivmod>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <UART_SetConfig+0x384>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	2164      	movs	r1, #100	; 0x64
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	3332      	adds	r3, #50	; 0x32
 800230e:	4a07      	ldr	r2, [pc, #28]	; (800232c <UART_SetConfig+0x384>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	f003 0207 	and.w	r2, r3, #7
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4442      	add	r2, r8
 8002320:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002322:	e1b2      	b.n	800268a <UART_SetConfig+0x6e2>
 8002324:	40011000 	.word	0x40011000
 8002328:	40011400 	.word	0x40011400
 800232c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4ad7      	ldr	r2, [pc, #860]	; (8002694 <UART_SetConfig+0x6ec>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d005      	beq.n	8002346 <UART_SetConfig+0x39e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4ad6      	ldr	r2, [pc, #856]	; (8002698 <UART_SetConfig+0x6f0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	f040 80d1 	bne.w	80024e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002346:	f7ff fa7b 	bl	8001840 <HAL_RCC_GetPCLK2Freq>
 800234a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	469a      	mov	sl, r3
 8002350:	f04f 0b00 	mov.w	fp, #0
 8002354:	46d0      	mov	r8, sl
 8002356:	46d9      	mov	r9, fp
 8002358:	eb18 0308 	adds.w	r3, r8, r8
 800235c:	eb49 0409 	adc.w	r4, r9, r9
 8002360:	4698      	mov	r8, r3
 8002362:	46a1      	mov	r9, r4
 8002364:	eb18 080a 	adds.w	r8, r8, sl
 8002368:	eb49 090b 	adc.w	r9, r9, fp
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002378:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800237c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002380:	4688      	mov	r8, r1
 8002382:	4691      	mov	r9, r2
 8002384:	eb1a 0508 	adds.w	r5, sl, r8
 8002388:	eb4b 0609 	adc.w	r6, fp, r9
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4619      	mov	r1, r3
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	f04f 0400 	mov.w	r4, #0
 800239e:	0094      	lsls	r4, r2, #2
 80023a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023a4:	008b      	lsls	r3, r1, #2
 80023a6:	461a      	mov	r2, r3
 80023a8:	4623      	mov	r3, r4
 80023aa:	4628      	mov	r0, r5
 80023ac:	4631      	mov	r1, r6
 80023ae:	f7fd ff17 	bl	80001e0 <__aeabi_uldivmod>
 80023b2:	4603      	mov	r3, r0
 80023b4:	460c      	mov	r4, r1
 80023b6:	461a      	mov	r2, r3
 80023b8:	4bb8      	ldr	r3, [pc, #736]	; (800269c <UART_SetConfig+0x6f4>)
 80023ba:	fba3 2302 	umull	r2, r3, r3, r2
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	469b      	mov	fp, r3
 80023c8:	f04f 0c00 	mov.w	ip, #0
 80023cc:	46d9      	mov	r9, fp
 80023ce:	46e2      	mov	sl, ip
 80023d0:	eb19 0309 	adds.w	r3, r9, r9
 80023d4:	eb4a 040a 	adc.w	r4, sl, sl
 80023d8:	4699      	mov	r9, r3
 80023da:	46a2      	mov	sl, r4
 80023dc:	eb19 090b 	adds.w	r9, r9, fp
 80023e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023e4:	f04f 0100 	mov.w	r1, #0
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023f8:	4689      	mov	r9, r1
 80023fa:	4692      	mov	sl, r2
 80023fc:	eb1b 0509 	adds.w	r5, fp, r9
 8002400:	eb4c 060a 	adc.w	r6, ip, sl
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	f04f 0400 	mov.w	r4, #0
 8002416:	0094      	lsls	r4, r2, #2
 8002418:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800241c:	008b      	lsls	r3, r1, #2
 800241e:	461a      	mov	r2, r3
 8002420:	4623      	mov	r3, r4
 8002422:	4628      	mov	r0, r5
 8002424:	4631      	mov	r1, r6
 8002426:	f7fd fedb 	bl	80001e0 <__aeabi_uldivmod>
 800242a:	4603      	mov	r3, r0
 800242c:	460c      	mov	r4, r1
 800242e:	461a      	mov	r2, r3
 8002430:	4b9a      	ldr	r3, [pc, #616]	; (800269c <UART_SetConfig+0x6f4>)
 8002432:	fba3 1302 	umull	r1, r3, r3, r2
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2164      	movs	r1, #100	; 0x64
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	3332      	adds	r3, #50	; 0x32
 8002444:	4a95      	ldr	r2, [pc, #596]	; (800269c <UART_SetConfig+0x6f4>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002450:	4498      	add	r8, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	469b      	mov	fp, r3
 8002456:	f04f 0c00 	mov.w	ip, #0
 800245a:	46d9      	mov	r9, fp
 800245c:	46e2      	mov	sl, ip
 800245e:	eb19 0309 	adds.w	r3, r9, r9
 8002462:	eb4a 040a 	adc.w	r4, sl, sl
 8002466:	4699      	mov	r9, r3
 8002468:	46a2      	mov	sl, r4
 800246a:	eb19 090b 	adds.w	r9, r9, fp
 800246e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800247e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002482:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002486:	4689      	mov	r9, r1
 8002488:	4692      	mov	sl, r2
 800248a:	eb1b 0509 	adds.w	r5, fp, r9
 800248e:	eb4c 060a 	adc.w	r6, ip, sl
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4619      	mov	r1, r3
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	f04f 0400 	mov.w	r4, #0
 80024a4:	0094      	lsls	r4, r2, #2
 80024a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024aa:	008b      	lsls	r3, r1, #2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	4628      	mov	r0, r5
 80024b2:	4631      	mov	r1, r6
 80024b4:	f7fd fe94 	bl	80001e0 <__aeabi_uldivmod>
 80024b8:	4603      	mov	r3, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	461a      	mov	r2, r3
 80024be:	4b77      	ldr	r3, [pc, #476]	; (800269c <UART_SetConfig+0x6f4>)
 80024c0:	fba3 1302 	umull	r1, r3, r3, r2
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	2164      	movs	r1, #100	; 0x64
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	3332      	adds	r3, #50	; 0x32
 80024d2:	4a72      	ldr	r2, [pc, #456]	; (800269c <UART_SetConfig+0x6f4>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	f003 020f 	and.w	r2, r3, #15
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4442      	add	r2, r8
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	e0d0      	b.n	800268a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80024e8:	f7ff f996 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 80024ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	469a      	mov	sl, r3
 80024f2:	f04f 0b00 	mov.w	fp, #0
 80024f6:	46d0      	mov	r8, sl
 80024f8:	46d9      	mov	r9, fp
 80024fa:	eb18 0308 	adds.w	r3, r8, r8
 80024fe:	eb49 0409 	adc.w	r4, r9, r9
 8002502:	4698      	mov	r8, r3
 8002504:	46a1      	mov	r9, r4
 8002506:	eb18 080a 	adds.w	r8, r8, sl
 800250a:	eb49 090b 	adc.w	r9, r9, fp
 800250e:	f04f 0100 	mov.w	r1, #0
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800251a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800251e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002522:	4688      	mov	r8, r1
 8002524:	4691      	mov	r9, r2
 8002526:	eb1a 0508 	adds.w	r5, sl, r8
 800252a:	eb4b 0609 	adc.w	r6, fp, r9
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4619      	mov	r1, r3
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	f04f 0400 	mov.w	r4, #0
 8002540:	0094      	lsls	r4, r2, #2
 8002542:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002546:	008b      	lsls	r3, r1, #2
 8002548:	461a      	mov	r2, r3
 800254a:	4623      	mov	r3, r4
 800254c:	4628      	mov	r0, r5
 800254e:	4631      	mov	r1, r6
 8002550:	f7fd fe46 	bl	80001e0 <__aeabi_uldivmod>
 8002554:	4603      	mov	r3, r0
 8002556:	460c      	mov	r4, r1
 8002558:	461a      	mov	r2, r3
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <UART_SetConfig+0x6f4>)
 800255c:	fba3 2302 	umull	r2, r3, r3, r2
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	469b      	mov	fp, r3
 800256a:	f04f 0c00 	mov.w	ip, #0
 800256e:	46d9      	mov	r9, fp
 8002570:	46e2      	mov	sl, ip
 8002572:	eb19 0309 	adds.w	r3, r9, r9
 8002576:	eb4a 040a 	adc.w	r4, sl, sl
 800257a:	4699      	mov	r9, r3
 800257c:	46a2      	mov	sl, r4
 800257e:	eb19 090b 	adds.w	r9, r9, fp
 8002582:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002592:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002596:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800259a:	4689      	mov	r9, r1
 800259c:	4692      	mov	sl, r2
 800259e:	eb1b 0509 	adds.w	r5, fp, r9
 80025a2:	eb4c 060a 	adc.w	r6, ip, sl
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4619      	mov	r1, r3
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	f04f 0400 	mov.w	r4, #0
 80025b8:	0094      	lsls	r4, r2, #2
 80025ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025be:	008b      	lsls	r3, r1, #2
 80025c0:	461a      	mov	r2, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	4628      	mov	r0, r5
 80025c6:	4631      	mov	r1, r6
 80025c8:	f7fd fe0a 	bl	80001e0 <__aeabi_uldivmod>
 80025cc:	4603      	mov	r3, r0
 80025ce:	460c      	mov	r4, r1
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <UART_SetConfig+0x6f4>)
 80025d4:	fba3 1302 	umull	r1, r3, r3, r2
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	2164      	movs	r1, #100	; 0x64
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	3332      	adds	r3, #50	; 0x32
 80025e6:	4a2d      	ldr	r2, [pc, #180]	; (800269c <UART_SetConfig+0x6f4>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f2:	4498      	add	r8, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	469b      	mov	fp, r3
 80025f8:	f04f 0c00 	mov.w	ip, #0
 80025fc:	46d9      	mov	r9, fp
 80025fe:	46e2      	mov	sl, ip
 8002600:	eb19 0309 	adds.w	r3, r9, r9
 8002604:	eb4a 040a 	adc.w	r4, sl, sl
 8002608:	4699      	mov	r9, r3
 800260a:	46a2      	mov	sl, r4
 800260c:	eb19 090b 	adds.w	r9, r9, fp
 8002610:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002614:	f04f 0100 	mov.w	r1, #0
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002620:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002624:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002628:	4689      	mov	r9, r1
 800262a:	4692      	mov	sl, r2
 800262c:	eb1b 0509 	adds.w	r5, fp, r9
 8002630:	eb4c 060a 	adc.w	r6, ip, sl
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4619      	mov	r1, r3
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	f04f 0400 	mov.w	r4, #0
 8002646:	0094      	lsls	r4, r2, #2
 8002648:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800264c:	008b      	lsls	r3, r1, #2
 800264e:	461a      	mov	r2, r3
 8002650:	4623      	mov	r3, r4
 8002652:	4628      	mov	r0, r5
 8002654:	4631      	mov	r1, r6
 8002656:	f7fd fdc3 	bl	80001e0 <__aeabi_uldivmod>
 800265a:	4603      	mov	r3, r0
 800265c:	460c      	mov	r4, r1
 800265e:	461a      	mov	r2, r3
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <UART_SetConfig+0x6f4>)
 8002662:	fba3 1302 	umull	r1, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2164      	movs	r1, #100	; 0x64
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	3332      	adds	r3, #50	; 0x32
 8002674:	4a09      	ldr	r2, [pc, #36]	; (800269c <UART_SetConfig+0x6f4>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	f003 020f 	and.w	r2, r3, #15
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4442      	add	r2, r8
 8002686:	609a      	str	r2, [r3, #8]
}
 8002688:	e7ff      	b.n	800268a <UART_SetConfig+0x6e2>
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002694:	40011000 	.word	0x40011000
 8002698:	40011400 	.word	0x40011400
 800269c:	51eb851f 	.word	0x51eb851f

080026a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 0208 	add.w	r2, r3, #8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f103 0208 	add.w	r2, r3, #8
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 0208 	add.w	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	601a      	str	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002758:	d103      	bne.n	8002762 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e00c      	b.n	800277c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3308      	adds	r3, #8
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e002      	b.n	8002770 <vListInsert+0x2e>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	d2f6      	bcs.n	800276a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	601a      	str	r2, [r3, #0]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6892      	ldr	r2, [r2, #8]
 80027ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6852      	ldr	r2, [r2, #4]
 80027d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d103      	bne.n	80027e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	1e5a      	subs	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	e7fe      	b.n	800282e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002830:	f002 fb44 	bl	8004ebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283c:	68f9      	ldr	r1, [r7, #12]
 800283e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	441a      	add	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	3b01      	subs	r3, #1
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	441a      	add	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	22ff      	movs	r2, #255	; 0xff
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d114      	bne.n	80028b0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01a      	beq.n	80028c4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3310      	adds	r3, #16
 8002892:	4618      	mov	r0, r3
 8002894:	f001 f82c 	bl	80038f0 <xTaskRemoveFromEventList>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <xQueueGenericReset+0xcc>)
 80028a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	e009      	b.n	80028c4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3310      	adds	r3, #16
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fef3 	bl	80026a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3324      	adds	r3, #36	; 0x24
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff feee 	bl	80026a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028c4:	f002 fb28 	bl	8004f18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000ed04 	.word	0xe000ed04

080028d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <xQueueGenericCreate+0x28>
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	e7fe      	b.n	80028fe <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	e004      	b.n	8002916 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3350      	adds	r3, #80	; 0x50
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fbe8 	bl	80050f0 <pvPortMalloc>
 8002920:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3350      	adds	r3, #80	; 0x50
 8002930:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002932:	79fa      	ldrb	r2, [r7, #7]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f805 	bl	800294e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002944:	69bb      	ldr	r3, [r7, #24]
	}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e002      	b.n	8002970 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800297c:	2101      	movs	r1, #1
 800297e:	69b8      	ldr	r0, [r7, #24]
 8002980:	f7ff ff42 	bl	8002808 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	; 0x38
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029a2:	2300      	movs	r3, #0
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <xQueueGenericSend+0x30>
 80029b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c2:	e7fe      	b.n	80029c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <xQueueGenericSend+0x3e>
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <xQueueGenericSend+0x42>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <xQueueGenericSend+0x44>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <xQueueGenericSend+0x5c>
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	e7fe      	b.n	80029ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d103      	bne.n	80029fe <xQueueGenericSend+0x6a>
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <xQueueGenericSend+0x6e>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <xQueueGenericSend+0x70>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <xQueueGenericSend+0x88>
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	623b      	str	r3, [r7, #32]
 8002a1a:	e7fe      	b.n	8002a1a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a1c:	f001 f900 	bl	8003c20 <xTaskGetSchedulerState>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <xQueueGenericSend+0x98>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <xQueueGenericSend+0x9c>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <xQueueGenericSend+0x9e>
 8002a30:	2300      	movs	r3, #0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <xQueueGenericSend+0xb6>
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	e7fe      	b.n	8002a48 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a4a:	f002 fa37 	bl	8004ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <xQueueGenericSend+0xcc>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d129      	bne.n	8002ab4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a66:	f000 f9ff 	bl	8002e68 <prvCopyDataToQueue>
 8002a6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d010      	beq.n	8002a96 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	3324      	adds	r3, #36	; 0x24
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 ff39 	bl	80038f0 <xTaskRemoveFromEventList>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a84:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <xQueueGenericSend+0x1f0>)
 8002a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	e00a      	b.n	8002aac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <xQueueGenericSend+0x1f0>)
 8002a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002aac:	f002 fa34 	bl	8004f18 <vPortExitCritical>
				return pdPASS;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e063      	b.n	8002b7c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aba:	f002 fa2d 	bl	8004f18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e05c      	b.n	8002b7c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d106      	bne.n	8002ad6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 ff71 	bl	80039b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ad6:	f002 fa1f 	bl	8004f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ada:	f000 fcef 	bl	80034bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ade:	f002 f9ed 	bl	8004ebc <vPortEnterCritical>
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ae8:	b25b      	sxtb	r3, r3
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d103      	bne.n	8002af8 <xQueueGenericSend+0x164>
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d103      	bne.n	8002b0e <xQueueGenericSend+0x17a>
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b0e:	f002 fa03 	bl	8004f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b12:	1d3a      	adds	r2, r7, #4
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 ff60 	bl	80039e0 <xTaskCheckForTimeOut>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d124      	bne.n	8002b70 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b28:	f000 fa96 	bl	8003058 <prvIsQueueFull>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d018      	beq.n	8002b64 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	3310      	adds	r3, #16
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fe8a 	bl	8003854 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b42:	f000 fa21 	bl	8002f88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b46:	f000 fcc7 	bl	80034d8 <xTaskResumeAll>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f47f af7c 	bne.w	8002a4a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <xQueueGenericSend+0x1f0>)
 8002b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	e772      	b.n	8002a4a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b66:	f000 fa0f 	bl	8002f88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b6a:	f000 fcb5 	bl	80034d8 <xTaskResumeAll>
 8002b6e:	e76c      	b.n	8002a4a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b72:	f000 fa09 	bl	8002f88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b76:	f000 fcaf 	bl	80034d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3738      	adds	r7, #56	; 0x38
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08e      	sub	sp, #56	; 0x38
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <xQueueGenericSendFromISR+0x2c>
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb2:	e7fe      	b.n	8002bb2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <xQueueGenericSendFromISR+0x3a>
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <xQueueGenericSendFromISR+0x3e>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueGenericSendFromISR+0x40>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <xQueueGenericSendFromISR+0x58>
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	623b      	str	r3, [r7, #32]
 8002bde:	e7fe      	b.n	8002bde <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d103      	bne.n	8002bee <xQueueGenericSendFromISR+0x66>
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x6a>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueGenericSendFromISR+0x6c>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <xQueueGenericSendFromISR+0x84>
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e7fe      	b.n	8002c0a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c0c:	f002 fa32 	bl	8005074 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c10:	f3ef 8211 	mrs	r2, BASEPRI
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	61ba      	str	r2, [r7, #24]
 8002c26:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c28:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d302      	bcc.n	8002c3e <xQueueGenericSendFromISR+0xb6>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d12c      	bne.n	8002c98 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c4e:	f000 f90b 	bl	8002e68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c52:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d112      	bne.n	8002c82 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d016      	beq.n	8002c92 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	3324      	adds	r3, #36	; 0x24
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fe41 	bl	80038f0 <xTaskRemoveFromEventList>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e007      	b.n	8002c92 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c86:	3301      	adds	r3, #1
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	b25a      	sxtb	r2, r3
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c92:	2301      	movs	r3, #1
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c96:	e001      	b.n	8002c9c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3738      	adds	r7, #56	; 0x38
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <xQueueReceive+0x2e>
	__asm volatile
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	623b      	str	r3, [r7, #32]
 8002cdc:	e7fe      	b.n	8002cdc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <xQueueReceive+0x3c>
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <xQueueReceive+0x40>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <xQueueReceive+0x42>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <xQueueReceive+0x5a>
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	e7fe      	b.n	8002d08 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d0a:	f000 ff89 	bl	8003c20 <xTaskGetSchedulerState>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <xQueueReceive+0x6a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <xQueueReceive+0x6e>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <xQueueReceive+0x70>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <xQueueReceive+0x88>
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e7fe      	b.n	8002d36 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d38:	f002 f8c0 	bl	8004ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01f      	beq.n	8002d88 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4c:	f000 f8f6 	bl	8002f3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	1e5a      	subs	r2, r3, #1
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00f      	beq.n	8002d80 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	3310      	adds	r3, #16
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fdc3 	bl	80038f0 <xTaskRemoveFromEventList>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d70:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <xQueueReceive+0x1b4>)
 8002d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d80:	f002 f8ca 	bl	8004f18 <vPortExitCritical>
				return pdPASS;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e069      	b.n	8002e5c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d8e:	f002 f8c3 	bl	8004f18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e062      	b.n	8002e5c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d9c:	f107 0310 	add.w	r3, r7, #16
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fe07 	bl	80039b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002da6:	2301      	movs	r3, #1
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002daa:	f002 f8b5 	bl	8004f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dae:	f000 fb85 	bl	80034bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002db2:	f002 f883 	bl	8004ebc <vPortEnterCritical>
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dbc:	b25b      	sxtb	r3, r3
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d103      	bne.n	8002dcc <xQueueReceive+0x11c>
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d103      	bne.n	8002de2 <xQueueReceive+0x132>
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de2:	f002 f899 	bl	8004f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002de6:	1d3a      	adds	r2, r7, #4
 8002de8:	f107 0310 	add.w	r3, r7, #16
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fdf6 	bl	80039e0 <xTaskCheckForTimeOut>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d123      	bne.n	8002e42 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfc:	f000 f916 	bl	800302c <prvIsQueueEmpty>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d017      	beq.n	8002e36 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	3324      	adds	r3, #36	; 0x24
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fd20 	bl	8003854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e16:	f000 f8b7 	bl	8002f88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e1a:	f000 fb5d 	bl	80034d8 <xTaskResumeAll>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d189      	bne.n	8002d38 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <xQueueReceive+0x1b4>)
 8002e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	e780      	b.n	8002d38 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e38:	f000 f8a6 	bl	8002f88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e3c:	f000 fb4c 	bl	80034d8 <xTaskResumeAll>
 8002e40:	e77a      	b.n	8002d38 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e44:	f000 f8a0 	bl	8002f88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e48:	f000 fb46 	bl	80034d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e4e:	f000 f8ed 	bl	800302c <prvIsQueueEmpty>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f43f af6f 	beq.w	8002d38 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	e000ed04 	.word	0xe000ed04

08002e68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d14d      	bne.n	8002f2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fee2 	bl	8003c5c <xTaskPriorityDisinherit>
 8002e98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e043      	b.n	8002f2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d119      	bne.n	8002edc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6858      	ldr	r0, [r3, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	f002 fb16 	bl	80054e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	441a      	add	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d32b      	bcc.n	8002f2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	e026      	b.n	8002f2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68d8      	ldr	r0, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	f002 fafc 	bl	80054e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	425b      	negs	r3, r3
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d207      	bcs.n	8002f18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	425b      	negs	r3, r3
 8002f12:	441a      	add	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d105      	bne.n	8002f2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f32:	697b      	ldr	r3, [r7, #20]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	441a      	add	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d303      	bcc.n	8002f70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68d9      	ldr	r1, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6838      	ldr	r0, [r7, #0]
 8002f7c:	f002 fab2 	bl	80054e4 <memcpy>
	}
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f90:	f001 ff94 	bl	8004ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f9c:	e011      	b.n	8002fc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d012      	beq.n	8002fcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3324      	adds	r3, #36	; 0x24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fca0 	bl	80038f0 <xTaskRemoveFromEventList>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fb6:	f000 fd73 	bl	8003aa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	dce9      	bgt.n	8002f9e <prvUnlockQueue+0x16>
 8002fca:	e000      	b.n	8002fce <prvUnlockQueue+0x46>
					break;
 8002fcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fd6:	f001 ff9f 	bl	8004f18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fda:	f001 ff6f 	bl	8004ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fe6:	e011      	b.n	800300c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fc7b 	bl	80038f0 <xTaskRemoveFromEventList>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003000:	f000 fd4e 	bl	8003aa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003004:	7bbb      	ldrb	r3, [r7, #14]
 8003006:	3b01      	subs	r3, #1
 8003008:	b2db      	uxtb	r3, r3
 800300a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800300c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003010:	2b00      	cmp	r3, #0
 8003012:	dce9      	bgt.n	8002fe8 <prvUnlockQueue+0x60>
 8003014:	e000      	b.n	8003018 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003016:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003020:	f001 ff7a 	bl	8004f18 <vPortExitCritical>
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003034:	f001 ff42 	bl	8004ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003040:	2301      	movs	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e001      	b.n	800304a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800304a:	f001 ff65 	bl	8004f18 <vPortExitCritical>

	return xReturn;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003060:	f001 ff2c 	bl	8004ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	429a      	cmp	r2, r3
 800306e:	d102      	bne.n	8003076 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003070:	2301      	movs	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	e001      	b.n	800307a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800307a:	f001 ff4d 	bl	8004f18 <vPortExitCritical>

	return xReturn;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e014      	b.n	80030c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003098:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <vQueueAddToRegistry+0x4c>)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030a4:	490b      	ldr	r1, [pc, #44]	; (80030d4 <vQueueAddToRegistry+0x4c>)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <vQueueAddToRegistry+0x4c>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030ba:	e005      	b.n	80030c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3301      	adds	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b07      	cmp	r3, #7
 80030c6:	d9e7      	bls.n	8003098 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	20012ed8 	.word	0x20012ed8

080030d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030e8:	f001 fee8 	bl	8004ebc <vPortEnterCritical>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030f2:	b25b      	sxtb	r3, r3
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d103      	bne.n	8003102 <vQueueWaitForMessageRestricted+0x2a>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003108:	b25b      	sxtb	r3, r3
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d103      	bne.n	8003118 <vQueueWaitForMessageRestricted+0x40>
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003118:	f001 fefe 	bl	8004f18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3324      	adds	r3, #36	; 0x24
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fbb5 	bl	800389c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003132:	6978      	ldr	r0, [r7, #20]
 8003134:	f7ff ff28 	bl	8002f88 <prvUnlockQueue>
	}
 8003138:	bf00      	nop
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08c      	sub	sp, #48	; 0x30
 8003144:	af04      	add	r7, sp, #16
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f001 ffcb 	bl	80050f0 <pvPortMalloc>
 800315a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003162:	2058      	movs	r0, #88	; 0x58
 8003164:	f001 ffc4 	bl	80050f0 <pvPortMalloc>
 8003168:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
 8003176:	e005      	b.n	8003184 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003178:	6978      	ldr	r0, [r7, #20]
 800317a:	f002 f87b 	bl	8005274 <vPortFree>
 800317e:	e001      	b.n	8003184 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d013      	beq.n	80031b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	2300      	movs	r3, #0
 800318e:	9303      	str	r3, [sp, #12]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	9302      	str	r3, [sp, #8]
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f80e 	bl	80031c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031a6:	69f8      	ldr	r0, [r7, #28]
 80031a8:	f000 f89a 	bl	80032e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031ac:	2301      	movs	r3, #1
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	e002      	b.n	80031b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031b8:	69bb      	ldr	r3, [r7, #24]
	}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b088      	sub	sp, #32
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	461a      	mov	r2, r3
 80031da:	21a5      	movs	r1, #165	; 0xa5
 80031dc:	f002 f98d 	bl	80054fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031ea:	3b01      	subs	r3, #1
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f023 0307 	bic.w	r3, r3, #7
 80031f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <prvInitialiseNewTask+0x56>
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e7fe      	b.n	8003216 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01f      	beq.n	800325e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e012      	b.n	800324a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	7819      	ldrb	r1, [r3, #0]
 800322c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	3334      	adds	r3, #52	; 0x34
 8003234:	460a      	mov	r2, r1
 8003236:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	4413      	add	r3, r2
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d006      	beq.n	8003252 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	3301      	adds	r3, #1
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2b09      	cmp	r3, #9
 800324e:	d9e9      	bls.n	8003224 <prvInitialiseNewTask+0x62>
 8003250:	e000      	b.n	8003254 <prvInitialiseNewTask+0x92>
			{
				break;
 8003252:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800325c:	e003      	b.n	8003266 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	2b0e      	cmp	r3, #14
 800326a:	d901      	bls.n	8003270 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800326c:	230e      	movs	r3, #14
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800327a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	2200      	movs	r2, #0
 8003280:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	3304      	adds	r3, #4
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fa2a 	bl	80026e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	3318      	adds	r3, #24
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fa25 	bl	80026e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	f1c3 020f 	rsb	r2, r3, #15
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	2200      	movs	r2, #0
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	69b8      	ldr	r0, [r7, #24]
 80032c0:	f001 fcc8 	bl	8004c54 <pxPortInitialiseStack>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032d6:	bf00      	nop
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032e8:	f001 fde8 	bl	8004ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032ec:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <prvAddNewTaskToReadyList+0xc0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <prvAddNewTaskToReadyList+0xc0>)
 80032f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032f6:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032fe:	4a29      	ldr	r2, [pc, #164]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003304:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <prvAddNewTaskToReadyList+0xc0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d110      	bne.n	800332e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800330c:	f000 fbec 	bl	8003ae8 <prvInitialiseTaskLists>
 8003310:	e00d      	b.n	800332e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <prvAddNewTaskToReadyList+0xc8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	429a      	cmp	r2, r3
 8003326:	d802      	bhi.n	800332e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003328:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <prvAddNewTaskToReadyList+0xcc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <prvAddNewTaskToReadyList+0xcc>)
 8003336:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003338:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <prvAddNewTaskToReadyList+0xcc>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2201      	movs	r2, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <prvAddNewTaskToReadyList+0xd0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <prvAddNewTaskToReadyList+0xd0>)
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <prvAddNewTaskToReadyList+0xd4>)
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7ff f9c6 	bl	80026fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800336e:	f001 fdd3 	bl	8004f18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <prvAddNewTaskToReadyList+0xc8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00e      	beq.n	8003398 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <prvAddNewTaskToReadyList+0xc4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	429a      	cmp	r2, r3
 8003386:	d207      	bcs.n	8003398 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <prvAddNewTaskToReadyList+0xd8>)
 800338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200001cc 	.word	0x200001cc
 80033a4:	2000002c 	.word	0x2000002c
 80033a8:	200001d8 	.word	0x200001d8
 80033ac:	200001e8 	.word	0x200001e8
 80033b0:	200001d4 	.word	0x200001d4
 80033b4:	20000030 	.word	0x20000030
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d016      	beq.n	80033fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <vTaskDelay+0x60>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <vTaskDelay+0x2e>
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	e7fe      	b.n	80033e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80033ea:	f000 f867 	bl	80034bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033ee:	2100      	movs	r1, #0
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fcb7 	bl	8003d64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033f6:	f000 f86f 	bl	80034d8 <xTaskResumeAll>
 80033fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <vTaskDelay+0x64>)
 8003404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200001f4 	.word	0x200001f4
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800342a:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <vTaskStartScheduler+0x80>)
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	2300      	movs	r3, #0
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	2282      	movs	r2, #130	; 0x82
 8003436:	491c      	ldr	r1, [pc, #112]	; (80034a8 <vTaskStartScheduler+0x84>)
 8003438:	481c      	ldr	r0, [pc, #112]	; (80034ac <vTaskStartScheduler+0x88>)
 800343a:	f7ff fe81 	bl	8003140 <xTaskCreate>
 800343e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d102      	bne.n	800344c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003446:	f001 f8f7 	bl	8004638 <xTimerCreateTimerTask>
 800344a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d115      	bne.n	800347e <vTaskStartScheduler+0x5a>
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <vTaskStartScheduler+0x8c>)
 8003466:	f04f 32ff 	mov.w	r2, #4294967295
 800346a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <vTaskStartScheduler+0x90>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <vTaskStartScheduler+0x94>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003478:	f001 fc72 	bl	8004d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800347c:	e00d      	b.n	800349a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d109      	bne.n	800349a <vTaskStartScheduler+0x76>
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e7fe      	b.n	8003498 <vTaskStartScheduler+0x74>
}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200001f0 	.word	0x200001f0
 80034a8:	080055a0 	.word	0x080055a0
 80034ac:	08003ab9 	.word	0x08003ab9
 80034b0:	200001ec 	.word	0x200001ec
 80034b4:	200001d8 	.word	0x200001d8
 80034b8:	200001d0 	.word	0x200001d0

080034bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <vTaskSuspendAll+0x18>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3301      	adds	r3, #1
 80034c6:	4a03      	ldr	r2, [pc, #12]	; (80034d4 <vTaskSuspendAll+0x18>)
 80034c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	200001f4 	.word	0x200001f4

080034d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <xTaskResumeAll+0x114>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <xTaskResumeAll+0x2a>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	e7fe      	b.n	8003500 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003502:	f001 fcdb 	bl	8004ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003506:	4b39      	ldr	r3, [pc, #228]	; (80035ec <xTaskResumeAll+0x114>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3b01      	subs	r3, #1
 800350c:	4a37      	ldr	r2, [pc, #220]	; (80035ec <xTaskResumeAll+0x114>)
 800350e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <xTaskResumeAll+0x114>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d161      	bne.n	80035dc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003518:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <xTaskResumeAll+0x118>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d05d      	beq.n	80035dc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003520:	e02e      	b.n	8003580 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003522:	4b34      	ldr	r3, [pc, #208]	; (80035f4 <xTaskResumeAll+0x11c>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3318      	adds	r3, #24
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f940 	bl	80027b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3304      	adds	r3, #4
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f93b 	bl	80027b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	2201      	movs	r2, #1
 8003544:	409a      	lsls	r2, r3
 8003546:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <xTaskResumeAll+0x120>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <xTaskResumeAll+0x120>)
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4a27      	ldr	r2, [pc, #156]	; (80035fc <xTaskResumeAll+0x124>)
 800355e:	441a      	add	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3304      	adds	r3, #4
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f7ff f8c7 	bl	80026fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	4b23      	ldr	r3, [pc, #140]	; (8003600 <xTaskResumeAll+0x128>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800357a:	4b22      	ldr	r3, [pc, #136]	; (8003604 <xTaskResumeAll+0x12c>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <xTaskResumeAll+0x11c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1cc      	bne.n	8003522 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800358e:	f000 fb27 	bl	8003be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <xTaskResumeAll+0x130>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d010      	beq.n	80035c0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800359e:	f000 f847 	bl	8003630 <xTaskIncrementTick>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <xTaskResumeAll+0x12c>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f1      	bne.n	800359e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <xTaskResumeAll+0x130>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <xTaskResumeAll+0x12c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <xTaskResumeAll+0x134>)
 80035ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035dc:	f001 fc9c 	bl	8004f18 <vPortExitCritical>

	return xAlreadyYielded;
 80035e0:	68bb      	ldr	r3, [r7, #8]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200001f4 	.word	0x200001f4
 80035f0:	200001cc 	.word	0x200001cc
 80035f4:	2000018c 	.word	0x2000018c
 80035f8:	200001d4 	.word	0x200001d4
 80035fc:	20000030 	.word	0x20000030
 8003600:	2000002c 	.word	0x2000002c
 8003604:	200001e0 	.word	0x200001e0
 8003608:	200001dc 	.word	0x200001dc
 800360c:	e000ed04 	.word	0xe000ed04

08003610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <xTaskGetTickCount+0x1c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800361c:	687b      	ldr	r3, [r7, #4]
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	200001d0 	.word	0x200001d0

08003630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800363a:	4b4e      	ldr	r3, [pc, #312]	; (8003774 <xTaskIncrementTick+0x144>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 8087 	bne.w	8003752 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003644:	4b4c      	ldr	r3, [pc, #304]	; (8003778 <xTaskIncrementTick+0x148>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800364c:	4a4a      	ldr	r2, [pc, #296]	; (8003778 <xTaskIncrementTick+0x148>)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11f      	bne.n	8003698 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003658:	4b48      	ldr	r3, [pc, #288]	; (800377c <xTaskIncrementTick+0x14c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <xTaskIncrementTick+0x46>
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	e7fe      	b.n	8003674 <xTaskIncrementTick+0x44>
 8003676:	4b41      	ldr	r3, [pc, #260]	; (800377c <xTaskIncrementTick+0x14c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	4b40      	ldr	r3, [pc, #256]	; (8003780 <xTaskIncrementTick+0x150>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a3e      	ldr	r2, [pc, #248]	; (800377c <xTaskIncrementTick+0x14c>)
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4a3e      	ldr	r2, [pc, #248]	; (8003780 <xTaskIncrementTick+0x150>)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b3e      	ldr	r3, [pc, #248]	; (8003784 <xTaskIncrementTick+0x154>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3301      	adds	r3, #1
 8003690:	4a3c      	ldr	r2, [pc, #240]	; (8003784 <xTaskIncrementTick+0x154>)
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	f000 faa4 	bl	8003be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003698:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <xTaskIncrementTick+0x158>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d348      	bcc.n	8003734 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <xTaskIncrementTick+0x14c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ac:	4b36      	ldr	r3, [pc, #216]	; (8003788 <xTaskIncrementTick+0x158>)
 80036ae:	f04f 32ff 	mov.w	r2, #4294967295
 80036b2:	601a      	str	r2, [r3, #0]
					break;
 80036b4:	e03e      	b.n	8003734 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b6:	4b31      	ldr	r3, [pc, #196]	; (800377c <xTaskIncrementTick+0x14c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d203      	bcs.n	80036d6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036ce:	4a2e      	ldr	r2, [pc, #184]	; (8003788 <xTaskIncrementTick+0x158>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036d4:	e02e      	b.n	8003734 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	3304      	adds	r3, #4
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f86a 	bl	80027b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d004      	beq.n	80036f2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3318      	adds	r3, #24
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f861 	bl	80027b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	2201      	movs	r2, #1
 80036f8:	409a      	lsls	r2, r3
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <xTaskIncrementTick+0x15c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	4a22      	ldr	r2, [pc, #136]	; (800378c <xTaskIncrementTick+0x15c>)
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <xTaskIncrementTick+0x160>)
 8003712:	441a      	add	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f7fe ffed 	bl	80026fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <xTaskIncrementTick+0x164>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	429a      	cmp	r2, r3
 800372c:	d3b9      	bcc.n	80036a2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800372e:	2301      	movs	r3, #1
 8003730:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003732:	e7b6      	b.n	80036a2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <xTaskIncrementTick+0x164>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373a:	4915      	ldr	r1, [pc, #84]	; (8003790 <xTaskIncrementTick+0x160>)
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d907      	bls.n	800375c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e004      	b.n	800375c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <xTaskIncrementTick+0x168>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <xTaskIncrementTick+0x168>)
 800375a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800375c:	4b0f      	ldr	r3, [pc, #60]	; (800379c <xTaskIncrementTick+0x16c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003768:	697b      	ldr	r3, [r7, #20]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200001f4 	.word	0x200001f4
 8003778:	200001d0 	.word	0x200001d0
 800377c:	20000184 	.word	0x20000184
 8003780:	20000188 	.word	0x20000188
 8003784:	200001e4 	.word	0x200001e4
 8003788:	200001ec 	.word	0x200001ec
 800378c:	200001d4 	.word	0x200001d4
 8003790:	20000030 	.word	0x20000030
 8003794:	2000002c 	.word	0x2000002c
 8003798:	200001dc 	.word	0x200001dc
 800379c:	200001e0 	.word	0x200001e0

080037a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <vTaskSwitchContext+0xa0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037ae:	4b25      	ldr	r3, [pc, #148]	; (8003844 <vTaskSwitchContext+0xa4>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037b4:	e03e      	b.n	8003834 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80037b6:	4b23      	ldr	r3, [pc, #140]	; (8003844 <vTaskSwitchContext+0xa4>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037bc:	4b22      	ldr	r3, [pc, #136]	; (8003848 <vTaskSwitchContext+0xa8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037ca:	7afb      	ldrb	r3, [r7, #11]
 80037cc:	f1c3 031f 	rsb	r3, r3, #31
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	491e      	ldr	r1, [pc, #120]	; (800384c <vTaskSwitchContext+0xac>)
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <vTaskSwitchContext+0x5a>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	e7fe      	b.n	80037f8 <vTaskSwitchContext+0x58>
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4a11      	ldr	r2, [pc, #68]	; (800384c <vTaskSwitchContext+0xac>)
 8003806:	4413      	add	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	3308      	adds	r3, #8
 800381c:	429a      	cmp	r2, r3
 800381e:	d104      	bne.n	800382a <vTaskSwitchContext+0x8a>
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <vTaskSwitchContext+0xb0>)
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	200001f4 	.word	0x200001f4
 8003844:	200001e0 	.word	0x200001e0
 8003848:	200001d4 	.word	0x200001d4
 800384c:	20000030 	.word	0x20000030
 8003850:	2000002c 	.word	0x2000002c

08003854 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <vTaskPlaceOnEventList+0x24>
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e7fe      	b.n	8003876 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <vTaskPlaceOnEventList+0x44>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3318      	adds	r3, #24
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fe ff5e 	bl	8002742 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003886:	2101      	movs	r1, #1
 8003888:	6838      	ldr	r0, [r7, #0]
 800388a:	f000 fa6b 	bl	8003d64 <prvAddCurrentTaskToDelayedList>
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000002c 	.word	0x2000002c

0800389c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <vTaskPlaceOnEventListRestricted+0x26>
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	e7fe      	b.n	80038c0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <vTaskPlaceOnEventListRestricted+0x50>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3318      	adds	r3, #24
 80038c8:	4619      	mov	r1, r3
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7fe ff15 	bl	80026fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	68b8      	ldr	r0, [r7, #8]
 80038e0:	f000 fa40 	bl	8003d64 <prvAddCurrentTaskToDelayedList>
	}
 80038e4:	bf00      	nop
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	2000002c 	.word	0x2000002c

080038f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <xTaskRemoveFromEventList+0x2a>
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e7fe      	b.n	8003918 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	3318      	adds	r3, #24
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe ff48 	bl	80027b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <xTaskRemoveFromEventList+0xac>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11c      	bne.n	8003966 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	3304      	adds	r3, #4
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe ff3f 	bl	80027b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	2201      	movs	r2, #1
 800393c:	409a      	lsls	r2, r3
 800393e:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <xTaskRemoveFromEventList+0xb0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	4a16      	ldr	r2, [pc, #88]	; (80039a0 <xTaskRemoveFromEventList+0xb0>)
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <xTaskRemoveFromEventList+0xb4>)
 8003956:	441a      	add	r2, r3
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3304      	adds	r3, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f7fe fecb 	bl	80026fa <vListInsertEnd>
 8003964:	e005      	b.n	8003972 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	3318      	adds	r3, #24
 800396a:	4619      	mov	r1, r3
 800396c:	480e      	ldr	r0, [pc, #56]	; (80039a8 <xTaskRemoveFromEventList+0xb8>)
 800396e:	f7fe fec4 	bl	80026fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <xTaskRemoveFromEventList+0xbc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	429a      	cmp	r2, r3
 800397e:	d905      	bls.n	800398c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003980:	2301      	movs	r3, #1
 8003982:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <xTaskRemoveFromEventList+0xc0>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e001      	b.n	8003990 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003990:	697b      	ldr	r3, [r7, #20]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200001f4 	.word	0x200001f4
 80039a0:	200001d4 	.word	0x200001d4
 80039a4:	20000030 	.word	0x20000030
 80039a8:	2000018c 	.word	0x2000018c
 80039ac:	2000002c 	.word	0x2000002c
 80039b0:	200001e0 	.word	0x200001e0

080039b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <vTaskInternalSetTimeOutState+0x24>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <vTaskInternalSetTimeOutState+0x28>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	605a      	str	r2, [r3, #4]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	200001e4 	.word	0x200001e4
 80039dc:	200001d0 	.word	0x200001d0

080039e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <xTaskCheckForTimeOut+0x24>
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	e7fe      	b.n	8003a02 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <xTaskCheckForTimeOut+0x3e>
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e7fe      	b.n	8003a1c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003a1e:	f001 fa4d 	bl	8004ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a22:	4b1d      	ldr	r3, [pc, #116]	; (8003a98 <xTaskCheckForTimeOut+0xb8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d102      	bne.n	8003a42 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e023      	b.n	8003a8a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <xTaskCheckForTimeOut+0xbc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d007      	beq.n	8003a5e <xTaskCheckForTimeOut+0x7e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d302      	bcc.n	8003a5e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	e015      	b.n	8003a8a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d20b      	bcs.n	8003a80 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	1ad2      	subs	r2, r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff9d 	bl	80039b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	e004      	b.n	8003a8a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a8a:	f001 fa45 	bl	8004f18 <vPortExitCritical>

	return xReturn;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	200001d0 	.word	0x200001d0
 8003a9c:	200001e4 	.word	0x200001e4

08003aa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <vTaskMissedYield+0x14>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	200001e0 	.word	0x200001e0

08003ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ac0:	f000 f852 	bl	8003b68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <prvIdleTask+0x28>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d9f9      	bls.n	8003ac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <prvIdleTask+0x2c>)
 8003ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003adc:	e7f0      	b.n	8003ac0 <prvIdleTask+0x8>
 8003ade:	bf00      	nop
 8003ae0:	20000030 	.word	0x20000030
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	e00c      	b.n	8003b0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <prvInitialiseTaskLists+0x60>)
 8003b00:	4413      	add	r3, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fdcc 	bl	80026a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b0e      	cmp	r3, #14
 8003b12:	d9ef      	bls.n	8003af4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b14:	480d      	ldr	r0, [pc, #52]	; (8003b4c <prvInitialiseTaskLists+0x64>)
 8003b16:	f7fe fdc3 	bl	80026a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b1a:	480d      	ldr	r0, [pc, #52]	; (8003b50 <prvInitialiseTaskLists+0x68>)
 8003b1c:	f7fe fdc0 	bl	80026a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b20:	480c      	ldr	r0, [pc, #48]	; (8003b54 <prvInitialiseTaskLists+0x6c>)
 8003b22:	f7fe fdbd 	bl	80026a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b26:	480c      	ldr	r0, [pc, #48]	; (8003b58 <prvInitialiseTaskLists+0x70>)
 8003b28:	f7fe fdba 	bl	80026a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b2c:	480b      	ldr	r0, [pc, #44]	; (8003b5c <prvInitialiseTaskLists+0x74>)
 8003b2e:	f7fe fdb7 	bl	80026a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <prvInitialiseTaskLists+0x78>)
 8003b34:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <prvInitialiseTaskLists+0x64>)
 8003b36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <prvInitialiseTaskLists+0x7c>)
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <prvInitialiseTaskLists+0x68>)
 8003b3c:	601a      	str	r2, [r3, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000030 	.word	0x20000030
 8003b4c:	2000015c 	.word	0x2000015c
 8003b50:	20000170 	.word	0x20000170
 8003b54:	2000018c 	.word	0x2000018c
 8003b58:	200001a0 	.word	0x200001a0
 8003b5c:	200001b8 	.word	0x200001b8
 8003b60:	20000184 	.word	0x20000184
 8003b64:	20000188 	.word	0x20000188

08003b68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b6e:	e019      	b.n	8003ba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b70:	f001 f9a4 	bl	8004ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <prvCheckTasksWaitingTermination+0x4c>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fe17 	bl	80027b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <prvCheckTasksWaitingTermination+0x50>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <prvCheckTasksWaitingTermination+0x50>)
 8003b8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <prvCheckTasksWaitingTermination+0x54>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <prvCheckTasksWaitingTermination+0x54>)
 8003b98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b9a:	f001 f9bd 	bl	8004f18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f80e 	bl	8003bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <prvCheckTasksWaitingTermination+0x54>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e1      	bne.n	8003b70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200001a0 	.word	0x200001a0
 8003bb8:	200001cc 	.word	0x200001cc
 8003bbc:	200001b4 	.word	0x200001b4

08003bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 fb51 	bl	8005274 <vPortFree>
			vPortFree( pxTCB );
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f001 fb4e 	bl	8005274 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <prvResetNextTaskUnblockTime+0x38>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <prvResetNextTaskUnblockTime+0x3c>)
 8003bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bf8:	e008      	b.n	8003c0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <prvResetNextTaskUnblockTime+0x38>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <prvResetNextTaskUnblockTime+0x3c>)
 8003c0a:	6013      	str	r3, [r2, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	20000184 	.word	0x20000184
 8003c1c:	200001ec 	.word	0x200001ec

08003c20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <xTaskGetSchedulerState+0x34>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	e008      	b.n	8003c46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c34:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <xTaskGetSchedulerState+0x38>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	e001      	b.n	8003c46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c46:	687b      	ldr	r3, [r7, #4]
	}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	200001d8 	.word	0x200001d8
 8003c58:	200001f4 	.word	0x200001f4

08003c5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d06c      	beq.n	8003d4c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c72:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <xTaskPriorityDisinherit+0xfc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d009      	beq.n	8003c90 <xTaskPriorityDisinherit+0x34>
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e7fe      	b.n	8003c8e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <xTaskPriorityDisinherit+0x50>
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	e7fe      	b.n	8003caa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d044      	beq.n	8003d4c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d140      	bne.n	8003d4c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fd70 	bl	80027b4 <uxListRemove>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d115      	bne.n	8003d06 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	491f      	ldr	r1, [pc, #124]	; (8003d5c <xTaskPriorityDisinherit+0x100>)
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xTaskPriorityDisinherit+0xaa>
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <xTaskPriorityDisinherit+0x104>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4013      	ands	r3, r2
 8003d02:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <xTaskPriorityDisinherit+0x104>)
 8003d04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	f1c3 020f 	rsb	r2, r3, #15
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <xTaskPriorityDisinherit+0x104>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <xTaskPriorityDisinherit+0x104>)
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4a08      	ldr	r2, [pc, #32]	; (8003d5c <xTaskPriorityDisinherit+0x100>)
 8003d3a:	441a      	add	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f7fe fcd9 	bl	80026fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d4c:	697b      	ldr	r3, [r7, #20]
	}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2000002c 	.word	0x2000002c
 8003d5c:	20000030 	.word	0x20000030
 8003d60:	200001d4 	.word	0x200001d4

08003d64 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d74:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fd1a 	bl	80027b4 <uxListRemove>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	4a20      	ldr	r2, [pc, #128]	; (8003e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d10a      	bne.n	8003dbc <prvAddCurrentTaskToDelayedList+0x58>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dac:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	481a      	ldr	r0, [pc, #104]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003db6:	f7fe fca0 	bl	80026fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003dba:	e026      	b.n	8003e0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dc4:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d209      	bcs.n	8003de8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7fe fcae 	bl	8002742 <vListInsert>
}
 8003de6:	e010      	b.n	8003e0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7fe fca4 	bl	8002742 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d202      	bcs.n	8003e0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e04:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6013      	str	r3, [r2, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200001d0 	.word	0x200001d0
 8003e18:	2000002c 	.word	0x2000002c
 8003e1c:	200001d4 	.word	0x200001d4
 8003e20:	200001b8 	.word	0x200001b8
 8003e24:	20000188 	.word	0x20000188
 8003e28:	20000184 	.word	0x20000184
 8003e2c:	200001ec 	.word	0x200001ec

08003e30 <Taskmonitor>:
	#endif

#endif


void Taskmonitor(void){
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b0bb      	sub	sp, #236	; 0xec
 8003e34:	af00      	add	r7, sp, #0
	char array[] = "Name      |Priority(Base/actual) |pxStack      |pxTopOfStack      |State \n\r";
 8003e36:	4a9b      	ldr	r2, [pc, #620]	; (80040a4 <Taskmonitor+0x274>)
 8003e38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	224c      	movs	r2, #76	; 0x4c
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 fb4f 	bl	80054e4 <memcpy>
	char item[100];
	char temp[15];
	HAL_UART_Transmit(&huart2, (uint8_t *)array,strlen(array),0xffff);
 8003e46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc f9c0 	bl	80001d0 <strlen>
 8003e50:	4603      	mov	r3, r0
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e5c:	4892      	ldr	r0, [pc, #584]	; (80040a8 <Taskmonitor+0x278>)
 8003e5e:	f7fd ffc0 	bl	8001de2 <HAL_UART_Transmit>
	StackType_t	*ScanStack;
	StackType_t	*ScanTopOfStack;
	int i;
	ListItem_t *pxNextItem;
	TCB_t *pxTCB;
	for(xPriority=0; xPriority<15; xPriority++){
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e68:	e109      	b.n	800407e <Taskmonitor+0x24e>
		if (listLIST_IS_EMPTY(&(pxReadyTasksLists[xPriority]))){
 8003e6a:	4990      	ldr	r1, [pc, #576]	; (80040ac <Taskmonitor+0x27c>)
 8003e6c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80f8 	beq.w	8004072 <Taskmonitor+0x242>
			continue;//empty就再跳回迴圈
		}
		else{
			NumberOfItems = listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[xPriority]));
 8003e82:	498a      	ldr	r1, [pc, #552]	; (80040ac <Taskmonitor+0x27c>)
 8003e84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			pxNextItem = listGET_ITEM_OF_HEAD_ENTRY(&(pxReadyTasksLists[xPriority]));
 8003e98:	4984      	ldr	r1, [pc, #528]	; (80040ac <Taskmonitor+0x27c>)
 8003e9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			for(i=0; i<NumberOfItems; i++){
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eb6:	e0d4      	b.n	8004062 <Taskmonitor+0x232>
				memset(item,32,sizeof(item));//清空,32表示空白鍵
 8003eb8:	f107 0314 	add.w	r3, r7, #20
 8003ebc:	2264      	movs	r2, #100	; 0x64
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 fb1a 	bl	80054fa <memset>
				memset(temp,32,sizeof(temp));
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	220f      	movs	r2, #15
 8003eca:	2120      	movs	r1, #32
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 fb14 	bl	80054fa <memset>
				pxTCB = pxNextItem->pvOwner;//去抓TCB
 8003ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				strncpy(item,pxTCB->pcTaskName,strlen(pxTCB->pcTaskName));//把TaskName放到item這個array裡面,strlen是取長度
 8003edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ee0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8003ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ee8:	3334      	adds	r3, #52	; 0x34
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fc f970 	bl	80001d0 <strlen>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 fb15 	bl	8005528 <strncpy>
				item[11] = '\0';
 8003efe:	2300      	movs	r3, #0
 8003f00:	77fb      	strb	r3, [r7, #31]

				ScanPriority = pxTCB->uxPriority;
 8003f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
				LongConvertCharArray(ScanPriority,&temp);
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003f14:	f000 faac 	bl	8004470 <LongConvertCharArray>
				strcat(item,temp);
 8003f18:	1d3a      	adds	r2, r7, #4
 8003f1a:	f107 0314 	add.w	r3, r7, #20
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 faf2 	bl	800550a <strcat>
				strcat(item,"/");
 8003f26:	f107 0314 	add.w	r3, r7, #20
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc f950 	bl	80001d0 <strlen>
 8003f30:	4603      	mov	r3, r0
 8003f32:	461a      	mov	r2, r3
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4413      	add	r3, r2
 8003f3a:	495d      	ldr	r1, [pc, #372]	; (80040b0 <Taskmonitor+0x280>)
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	460b      	mov	r3, r1
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	8013      	strh	r3, [r2, #0]
				ScanBasePriority = pxTCB->uxBasePriority;
 8003f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				LongConvertCharArray(ScanBasePriority,&temp);
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8003f56:	f000 fa8b 	bl	8004470 <LongConvertCharArray>
				strcat(item,temp);
 8003f5a:	1d3a      	adds	r2, r7, #4
 8003f5c:	f107 0314 	add.w	r3, r7, #20
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 fad1 	bl	800550a <strcat>

				strcat(item,"     ");//把第14格改成空白
 8003f68:	f107 0314 	add.w	r3, r7, #20
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fc f92f 	bl	80001d0 <strlen>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	f107 0314 	add.w	r3, r7, #20
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4a4d      	ldr	r2, [pc, #308]	; (80040b4 <Taskmonitor+0x284>)
 8003f7e:	6810      	ldr	r0, [r2, #0]
 8003f80:	6018      	str	r0, [r3, #0]
 8003f82:	8892      	ldrh	r2, [r2, #4]
 8003f84:	809a      	strh	r2, [r3, #4]
				//item[35] = '\0';//會從'\0'後面開始append
				ScanStack = pxTCB->pxStack;
 8003f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
				Uint32ConvertHex(ScanStack,&temp);
 8003f90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f94:	1d3a      	adds	r2, r7, #4
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fad9 	bl	8004550 <Uint32ConvertHex>
				strcat(item,temp);
 8003f9e:	1d3a      	adds	r2, r7, #4
 8003fa0:	f107 0314 	add.w	r3, r7, #20
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 faaf 	bl	800550a <strcat>


				strcat(item,"     ");
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc f90d 	bl	80001d0 <strlen>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	4413      	add	r3, r2
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <Taskmonitor+0x284>)
 8003fc2:	6810      	ldr	r0, [r2, #0]
 8003fc4:	6018      	str	r0, [r3, #0]
 8003fc6:	8892      	ldrh	r2, [r2, #4]
 8003fc8:	809a      	strh	r2, [r3, #4]
				ScanTopOfStack = pxTCB->pxTopOfStack;
 8003fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
				Uint32ConvertHex(ScanTopOfStack,&temp);
 8003fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fd8:	1d3a      	adds	r2, r7, #4
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fab7 	bl	8004550 <Uint32ConvertHex>
				strcat(item,temp);
 8003fe2:	1d3a      	adds	r2, r7, #4
 8003fe4:	f107 0314 	add.w	r3, r7, #20
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 fa8d 	bl	800550a <strcat>

				strcat(item,"     ");
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc f8eb 	bl	80001d0 <strlen>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f107 0314 	add.w	r3, r7, #20
 8004002:	4413      	add	r3, r2
 8004004:	4a2b      	ldr	r2, [pc, #172]	; (80040b4 <Taskmonitor+0x284>)
 8004006:	6810      	ldr	r0, [r2, #0]
 8004008:	6018      	str	r0, [r3, #0]
 800400a:	8892      	ldrh	r2, [r2, #4]
 800400c:	809a      	strh	r2, [r3, #4]
				strcat(item,"READY \n\r");//\n是下一行,\r/是對齊
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc f8dc 	bl	80001d0 <strlen>
 8004018:	4603      	mov	r3, r0
 800401a:	461a      	mov	r2, r3
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4413      	add	r3, r2
 8004022:	4925      	ldr	r1, [pc, #148]	; (80040b8 <Taskmonitor+0x288>)
 8004024:	461a      	mov	r2, r3
 8004026:	460b      	mov	r3, r1
 8004028:	cb03      	ldmia	r3!, {r0, r1}
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	6051      	str	r1, [r2, #4]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	7213      	strb	r3, [r2, #8]
				HAL_UART_Transmit(&huart2, (uint8_t *)item,strlen(item),0xffff);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc f8ca 	bl	80001d0 <strlen>
 800403c:	4603      	mov	r3, r0
 800403e:	b29a      	uxth	r2, r3
 8004040:	f107 0114 	add.w	r1, r7, #20
 8004044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004048:	4817      	ldr	r0, [pc, #92]	; (80040a8 <Taskmonitor+0x278>)
 800404a:	f7fd feca 	bl	8001de2 <HAL_UART_Transmit>
				pxNextItem = pxNextItem->pxNext;//換指下一個ListItem並assign給pxNextItem
 800404e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			for(i=0; i<NumberOfItems; i++){
 8004058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800405c:	3301      	adds	r3, #1
 800405e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004066:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800406a:	429a      	cmp	r2, r3
 800406c:	f63f af24 	bhi.w	8003eb8 <Taskmonitor+0x88>
 8004070:	e000      	b.n	8004074 <Taskmonitor+0x244>
			continue;//empty就再跳回迴圈
 8004072:	bf00      	nop
	for(xPriority=0; xPriority<15; xPriority++){
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004078:	3301      	adds	r3, #1
 800407a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004082:	2b0e      	cmp	r3, #14
 8004084:	f67f aef1 	bls.w	8003e6a <Taskmonitor+0x3a>
			}
		}
	}
	//pxDelayedTaskList
	NumberOfItems = listCURRENT_LIST_LENGTH(pxDelayedTaskList);
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <Taskmonitor+0x28c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	pxNextItem = listGET_ITEM_OF_HEAD_ENTRY(pxDelayedTaskList);
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <Taskmonitor+0x28c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(i=0; i<NumberOfItems; i++){
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040a2:	e0e4      	b.n	800426e <Taskmonitor+0x43e>
 80040a4:	080055cc 	.word	0x080055cc
 80040a8:	20012e54 	.word	0x20012e54
 80040ac:	20000030 	.word	0x20000030
 80040b0:	080055a8 	.word	0x080055a8
 80040b4:	080055ac 	.word	0x080055ac
 80040b8:	080055b4 	.word	0x080055b4
 80040bc:	20000184 	.word	0x20000184
		memset(item,32,sizeof(item));//清空,32表示空白鍵
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	2264      	movs	r2, #100	; 0x64
 80040c6:	2120      	movs	r1, #32
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 fa16 	bl	80054fa <memset>
		memset(temp,32,sizeof(temp));
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	220f      	movs	r2, #15
 80040d2:	2120      	movs	r1, #32
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 fa10 	bl	80054fa <memset>
		pxTCB = pxNextItem->pvOwner;//去抓TCB
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		strncpy(item,pxTCB->pcTaskName,strlen(pxTCB->pcTaskName));//把TaskName放到item這個array裡面,strlen是取長度
 80040e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040e8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80040ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040f0:	3334      	adds	r3, #52	; 0x34
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc f86c 	bl	80001d0 <strlen>
 80040f8:	4602      	mov	r2, r0
 80040fa:	f107 0314 	add.w	r3, r7, #20
 80040fe:	4621      	mov	r1, r4
 8004100:	4618      	mov	r0, r3
 8004102:	f001 fa11 	bl	8005528 <strncpy>
		item[11] = '\0';
 8004106:	2300      	movs	r3, #0
 8004108:	77fb      	strb	r3, [r7, #31]

		ScanPriority = pxTCB->uxPriority;
 800410a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		LongConvertCharArray(ScanPriority,&temp);
 8004114:	1d3b      	adds	r3, r7, #4
 8004116:	4619      	mov	r1, r3
 8004118:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800411c:	f000 f9a8 	bl	8004470 <LongConvertCharArray>
		strcat(item,temp);
 8004120:	1d3a      	adds	r2, r7, #4
 8004122:	f107 0314 	add.w	r3, r7, #20
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f001 f9ee 	bl	800550a <strcat>
		strcat(item,"/");
 800412e:	f107 0314 	add.w	r3, r7, #20
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc f84c 	bl	80001d0 <strlen>
 8004138:	4603      	mov	r3, r0
 800413a:	461a      	mov	r2, r3
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	4413      	add	r3, r2
 8004142:	49c6      	ldr	r1, [pc, #792]	; (800445c <Taskmonitor+0x62c>)
 8004144:	461a      	mov	r2, r3
 8004146:	460b      	mov	r3, r1
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	8013      	strh	r3, [r2, #0]
		ScanBasePriority = pxTCB->uxBasePriority;
 800414c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004152:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		LongConvertCharArray(ScanBasePriority,&temp);
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	4619      	mov	r1, r3
 800415a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800415e:	f000 f987 	bl	8004470 <LongConvertCharArray>
		strcat(item,temp);
 8004162:	1d3a      	adds	r2, r7, #4
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f001 f9cd 	bl	800550a <strcat>

		strcat(item,"     ");//把第14格改成空白
 8004170:	f107 0314 	add.w	r3, r7, #20
 8004174:	4618      	mov	r0, r3
 8004176:	f7fc f82b 	bl	80001d0 <strlen>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	f107 0314 	add.w	r3, r7, #20
 8004182:	4413      	add	r3, r2
 8004184:	4ab6      	ldr	r2, [pc, #728]	; (8004460 <Taskmonitor+0x630>)
 8004186:	6810      	ldr	r0, [r2, #0]
 8004188:	6018      	str	r0, [r3, #0]
 800418a:	8892      	ldrh	r2, [r2, #4]
 800418c:	809a      	strh	r2, [r3, #4]
		//item[35] = '\0';//會從'\0'後面開始append
		ScanStack = pxTCB->pxStack;
 800418e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		Uint32ConvertHex(ScanStack,&temp);
 8004198:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800419c:	1d3a      	adds	r2, r7, #4
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f9d5 	bl	8004550 <Uint32ConvertHex>
		strcat(item,temp);
 80041a6:	1d3a      	adds	r2, r7, #4
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 f9ab 	bl	800550a <strcat>


		strcat(item,"     ");
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc f809 	bl	80001d0 <strlen>
 80041be:	4603      	mov	r3, r0
 80041c0:	461a      	mov	r2, r3
 80041c2:	f107 0314 	add.w	r3, r7, #20
 80041c6:	4413      	add	r3, r2
 80041c8:	4aa5      	ldr	r2, [pc, #660]	; (8004460 <Taskmonitor+0x630>)
 80041ca:	6810      	ldr	r0, [r2, #0]
 80041cc:	6018      	str	r0, [r3, #0]
 80041ce:	8892      	ldrh	r2, [r2, #4]
 80041d0:	809a      	strh	r2, [r3, #4]
		ScanTopOfStack = pxTCB->pxTopOfStack;
 80041d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		Uint32ConvertHex(ScanTopOfStack,&temp);
 80041dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041e0:	1d3a      	adds	r2, r7, #4
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f9b3 	bl	8004550 <Uint32ConvertHex>
		strcat(item,temp);
 80041ea:	1d3a      	adds	r2, r7, #4
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 f989 	bl	800550a <strcat>

		strcat(item,"     ");
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fb ffe7 	bl	80001d0 <strlen>
 8004202:	4603      	mov	r3, r0
 8004204:	461a      	mov	r2, r3
 8004206:	f107 0314 	add.w	r3, r7, #20
 800420a:	4413      	add	r3, r2
 800420c:	4a94      	ldr	r2, [pc, #592]	; (8004460 <Taskmonitor+0x630>)
 800420e:	6810      	ldr	r0, [r2, #0]
 8004210:	6018      	str	r0, [r3, #0]
 8004212:	8892      	ldrh	r2, [r2, #4]
 8004214:	809a      	strh	r2, [r3, #4]
		strcat(item,"BLOCKED \n\r");//\n是下一行,\r/是對齊
 8004216:	f107 0314 	add.w	r3, r7, #20
 800421a:	4618      	mov	r0, r3
 800421c:	f7fb ffd8 	bl	80001d0 <strlen>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	4413      	add	r3, r2
 800422a:	498e      	ldr	r1, [pc, #568]	; (8004464 <Taskmonitor+0x634>)
 800422c:	461a      	mov	r2, r3
 800422e:	460b      	mov	r3, r1
 8004230:	cb03      	ldmia	r3!, {r0, r1}
 8004232:	6010      	str	r0, [r2, #0]
 8004234:	6051      	str	r1, [r2, #4]
 8004236:	8819      	ldrh	r1, [r3, #0]
 8004238:	789b      	ldrb	r3, [r3, #2]
 800423a:	8111      	strh	r1, [r2, #8]
 800423c:	7293      	strb	r3, [r2, #10]
		HAL_UART_Transmit(&huart2, (uint8_t *)item,strlen(item),0xffff);
 800423e:	f107 0314 	add.w	r3, r7, #20
 8004242:	4618      	mov	r0, r3
 8004244:	f7fb ffc4 	bl	80001d0 <strlen>
 8004248:	4603      	mov	r3, r0
 800424a:	b29a      	uxth	r2, r3
 800424c:	f107 0114 	add.w	r1, r7, #20
 8004250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004254:	4884      	ldr	r0, [pc, #528]	; (8004468 <Taskmonitor+0x638>)
 8004256:	f7fd fdc4 	bl	8001de2 <HAL_UART_Transmit>
		pxNextItem = pxNextItem->pxNext;//換指下一個ListItem並assign給pxNextItem
 800425a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(i=0; i<NumberOfItems; i++){
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004268:	3301      	adds	r3, #1
 800426a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800426e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004272:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004276:	429a      	cmp	r2, r3
 8004278:	f63f af22 	bhi.w	80040c0 <Taskmonitor+0x290>
	}
	//pxOverflowDelayedTaskList
	NumberOfItems = listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList);
 800427c:	4b7b      	ldr	r3, [pc, #492]	; (800446c <Taskmonitor+0x63c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	pxNextItem = listGET_ITEM_OF_HEAD_ENTRY(pxOverflowDelayedTaskList);
 8004286:	4b79      	ldr	r3, [pc, #484]	; (800446c <Taskmonitor+0x63c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(i=0; i<NumberOfItems; i++){
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004296:	e0d6      	b.n	8004446 <Taskmonitor+0x616>
		memset(item,32,sizeof(item));//清空,32表示空白鍵
 8004298:	f107 0314 	add.w	r3, r7, #20
 800429c:	2264      	movs	r2, #100	; 0x64
 800429e:	2120      	movs	r1, #32
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 f92a 	bl	80054fa <memset>
		memset(temp,32,sizeof(temp));
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	220f      	movs	r2, #15
 80042aa:	2120      	movs	r1, #32
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 f924 	bl	80054fa <memset>
		pxTCB = pxNextItem->pvOwner;//去抓TCB
 80042b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		strncpy(item,pxTCB->pcTaskName,strlen(pxTCB->pcTaskName));//把TaskName放到item這個array裡面,strlen是取長度
 80042bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042c0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80042c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042c8:	3334      	adds	r3, #52	; 0x34
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fb ff80 	bl	80001d0 <strlen>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	4621      	mov	r1, r4
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 f925 	bl	8005528 <strncpy>
		item[11] = '\0';
 80042de:	2300      	movs	r3, #0
 80042e0:	77fb      	strb	r3, [r7, #31]

		ScanPriority = pxTCB->uxPriority;
 80042e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		LongConvertCharArray(ScanPriority,&temp);
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	4619      	mov	r1, r3
 80042f0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80042f4:	f000 f8bc 	bl	8004470 <LongConvertCharArray>
		strcat(item,temp);
 80042f8:	1d3a      	adds	r2, r7, #4
 80042fa:	f107 0314 	add.w	r3, r7, #20
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f001 f902 	bl	800550a <strcat>
		strcat(item,"/");
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	4618      	mov	r0, r3
 800430c:	f7fb ff60 	bl	80001d0 <strlen>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	4413      	add	r3, r2
 800431a:	4950      	ldr	r1, [pc, #320]	; (800445c <Taskmonitor+0x62c>)
 800431c:	461a      	mov	r2, r3
 800431e:	460b      	mov	r3, r1
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	8013      	strh	r3, [r2, #0]
		ScanBasePriority = pxTCB->uxBasePriority;
 8004324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		LongConvertCharArray(ScanBasePriority,&temp);
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	4619      	mov	r1, r3
 8004332:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004336:	f000 f89b 	bl	8004470 <LongConvertCharArray>
		strcat(item,temp);
 800433a:	1d3a      	adds	r2, r7, #4
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f001 f8e1 	bl	800550a <strcat>

		strcat(item,"     ");//把第14格改成空白
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	4618      	mov	r0, r3
 800434e:	f7fb ff3f 	bl	80001d0 <strlen>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	4413      	add	r3, r2
 800435c:	4a40      	ldr	r2, [pc, #256]	; (8004460 <Taskmonitor+0x630>)
 800435e:	6810      	ldr	r0, [r2, #0]
 8004360:	6018      	str	r0, [r3, #0]
 8004362:	8892      	ldrh	r2, [r2, #4]
 8004364:	809a      	strh	r2, [r3, #4]
		//item[35] = '\0';//會從'\0'後面開始append
		ScanStack = pxTCB->pxStack;
 8004366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		Uint32ConvertHex(ScanStack,&temp);
 8004370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004374:	1d3a      	adds	r2, r7, #4
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f8e9 	bl	8004550 <Uint32ConvertHex>
		strcat(item,temp);
 800437e:	1d3a      	adds	r2, r7, #4
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f8bf 	bl	800550a <strcat>


		strcat(item,"     ");
 800438c:	f107 0314 	add.w	r3, r7, #20
 8004390:	4618      	mov	r0, r3
 8004392:	f7fb ff1d 	bl	80001d0 <strlen>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	f107 0314 	add.w	r3, r7, #20
 800439e:	4413      	add	r3, r2
 80043a0:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <Taskmonitor+0x630>)
 80043a2:	6810      	ldr	r0, [r2, #0]
 80043a4:	6018      	str	r0, [r3, #0]
 80043a6:	8892      	ldrh	r2, [r2, #4]
 80043a8:	809a      	strh	r2, [r3, #4]
		ScanTopOfStack = pxTCB->pxTopOfStack;
 80043aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		Uint32ConvertHex(ScanTopOfStack,&temp);
 80043b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043b8:	1d3a      	adds	r2, r7, #4
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f8c7 	bl	8004550 <Uint32ConvertHex>
		strcat(item,temp);
 80043c2:	1d3a      	adds	r2, r7, #4
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 f89d 	bl	800550a <strcat>

		strcat(item,"     ");
 80043d0:	f107 0314 	add.w	r3, r7, #20
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fb fefb 	bl	80001d0 <strlen>
 80043da:	4603      	mov	r3, r0
 80043dc:	461a      	mov	r2, r3
 80043de:	f107 0314 	add.w	r3, r7, #20
 80043e2:	4413      	add	r3, r2
 80043e4:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <Taskmonitor+0x630>)
 80043e6:	6810      	ldr	r0, [r2, #0]
 80043e8:	6018      	str	r0, [r3, #0]
 80043ea:	8892      	ldrh	r2, [r2, #4]
 80043ec:	809a      	strh	r2, [r3, #4]
		strcat(item,"BLOCKED \n\r");//\n是下一行,\r/是對齊
 80043ee:	f107 0314 	add.w	r3, r7, #20
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fb feec 	bl	80001d0 <strlen>
 80043f8:	4603      	mov	r3, r0
 80043fa:	461a      	mov	r2, r3
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	4413      	add	r3, r2
 8004402:	4918      	ldr	r1, [pc, #96]	; (8004464 <Taskmonitor+0x634>)
 8004404:	461a      	mov	r2, r3
 8004406:	460b      	mov	r3, r1
 8004408:	cb03      	ldmia	r3!, {r0, r1}
 800440a:	6010      	str	r0, [r2, #0]
 800440c:	6051      	str	r1, [r2, #4]
 800440e:	8819      	ldrh	r1, [r3, #0]
 8004410:	789b      	ldrb	r3, [r3, #2]
 8004412:	8111      	strh	r1, [r2, #8]
 8004414:	7293      	strb	r3, [r2, #10]
		HAL_UART_Transmit(&huart2, (uint8_t *)item,strlen(item),0xffff);
 8004416:	f107 0314 	add.w	r3, r7, #20
 800441a:	4618      	mov	r0, r3
 800441c:	f7fb fed8 	bl	80001d0 <strlen>
 8004420:	4603      	mov	r3, r0
 8004422:	b29a      	uxth	r2, r3
 8004424:	f107 0114 	add.w	r1, r7, #20
 8004428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800442c:	480e      	ldr	r0, [pc, #56]	; (8004468 <Taskmonitor+0x638>)
 800442e:	f7fd fcd8 	bl	8001de2 <HAL_UART_Transmit>
		pxNextItem = pxNextItem->pxNext;//換指下一個ListItem並assign給pxNextItem
 8004432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(i=0; i<NumberOfItems; i++){
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004440:	3301      	adds	r3, #1
 8004442:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800444e:	429a      	cmp	r2, r3
 8004450:	f63f af22 	bhi.w	8004298 <Taskmonitor+0x468>
	}
}
 8004454:	bf00      	nop
 8004456:	37ec      	adds	r7, #236	; 0xec
 8004458:	46bd      	mov	sp, r7
 800445a:	bd90      	pop	{r4, r7, pc}
 800445c:	080055a8 	.word	0x080055a8
 8004460:	080055ac 	.word	0x080055ac
 8004464:	080055c0 	.word	0x080055c0
 8004468:	20012e54 	.word	0x20012e54
 800446c:	20000188 	.word	0x20000188

08004470 <LongConvertCharArray>:
void LongConvertCharArray(UBaseType_t TxScanTaskPriority, char *charTxScanTaskStack){
 8004470:	b480      	push	{r7}
 8004472:	b089      	sub	sp, #36	; 0x24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
		uint32_t remainder,quotient;
		int j = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
		int reversal = 0,end = 0;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
		char reversalChar;

		quotient = TxScanTaskPriority;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	61fb      	str	r3, [r7, #28]
		if(quotient == 0)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d127      	bne.n	80044e0 <LongConvertCharArray+0x70>
			charTxScanTaskStack[j++] = '0' + quotient;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1c59      	adds	r1, r3, #1
 8004498:	61b9      	str	r1, [r7, #24]
 800449a:	4619      	mov	r1, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	440b      	add	r3, r1
 80044a0:	3230      	adds	r2, #48	; 0x30
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
		while (quotient != 0){
 80044a6:	e01b      	b.n	80044e0 <LongConvertCharArray+0x70>
			remainder = quotient % 10;
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	4b28      	ldr	r3, [pc, #160]	; (800454c <LongConvertCharArray+0xdc>)
 80044ac:	fba3 1302 	umull	r1, r3, r3, r2
 80044b0:	08d9      	lsrs	r1, r3, #3
 80044b2:	460b      	mov	r3, r1
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	60bb      	str	r3, [r7, #8]
			charTxScanTaskStack[j++] = '0' + remainder;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	1c59      	adds	r1, r3, #1
 80044c6:	61b9      	str	r1, [r7, #24]
 80044c8:	4619      	mov	r1, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	440b      	add	r3, r1
 80044ce:	3230      	adds	r2, #48	; 0x30
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
			quotient = quotient / 10;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <LongConvertCharArray+0xdc>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	61fb      	str	r3, [r7, #28]
		while (quotient != 0){
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e0      	bne.n	80044a8 <LongConvertCharArray+0x38>
		}
		end = j-1;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]
		for(reversal;reversal<(end/2)+1;reversal++){
 80044ec:	e017      	b.n	800451e <LongConvertCharArray+0xae>
			reversalChar = charTxScanTaskStack[reversal];
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	4413      	add	r3, r2
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	73fb      	strb	r3, [r7, #15]
			charTxScanTaskStack[reversal] = charTxScanTaskStack[end];
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	441a      	add	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	440b      	add	r3, r1
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	701a      	strb	r2, [r3, #0]
			charTxScanTaskStack[end] = reversalChar;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	4413      	add	r3, r2
 800450e:	7bfa      	ldrb	r2, [r7, #15]
 8004510:	701a      	strb	r2, [r3, #0]
			end--;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	3b01      	subs	r3, #1
 8004516:	613b      	str	r3, [r7, #16]
		for(reversal;reversal<(end/2)+1;reversal++){
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	3301      	adds	r3, #1
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	0fda      	lsrs	r2, r3, #31
 8004522:	4413      	add	r3, r2
 8004524:	105b      	asrs	r3, r3, #1
 8004526:	3301      	adds	r3, #1
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	429a      	cmp	r2, r3
 800452c:	dbdf      	blt.n	80044ee <LongConvertCharArray+0x7e>
		}
		charTxScanTaskStack[j++] = 0;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	61ba      	str	r2, [r7, #24]
 8004534:	461a      	mov	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	4413      	add	r3, r2
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
}
 800453e:	bf00      	nop
 8004540:	3724      	adds	r7, #36	; 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	cccccccd 	.word	0xcccccccd

08004550 <Uint32ConvertHex>:

void Uint32ConvertHex(volatile StackType_t pStack, char *charTxScanTaskStack){
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
	uint32_t remainder,quotient;
	int j =  0;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
	int reversal = 2,end = 0;
 800455e:	2302      	movs	r3, #2
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
	char reversalChar;

	quotient = pStack;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	61fb      	str	r3, [r7, #28]
	charTxScanTaskStack[j++] = 48; // ascii  number 0
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	61ba      	str	r2, [r7, #24]
 8004570:	461a      	mov	r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4413      	add	r3, r2
 8004576:	2230      	movs	r2, #48	; 0x30
 8004578:	701a      	strb	r2, [r3, #0]
	charTxScanTaskStack[j++] = 88;// ascii alphabet X
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	61ba      	str	r2, [r7, #24]
 8004580:	461a      	mov	r2, r3
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	4413      	add	r3, r2
 8004586:	2258      	movs	r2, #88	; 0x58
 8004588:	701a      	strb	r2, [r3, #0]
	while (quotient != 0)
 800458a:	e020      	b.n	80045ce <Uint32ConvertHex+0x7e>
	{
		remainder = quotient % 16;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	60bb      	str	r3, [r7, #8]
		if (remainder < 10)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b09      	cmp	r3, #9
 8004598:	d80b      	bhi.n	80045b2 <Uint32ConvertHex+0x62>
			charTxScanTaskStack[j++] = '0' + remainder;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	1c59      	adds	r1, r3, #1
 80045a2:	61b9      	str	r1, [r7, #24]
 80045a4:	4619      	mov	r1, r3
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	440b      	add	r3, r1
 80045aa:	3230      	adds	r2, #48	; 0x30
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e00a      	b.n	80045c8 <Uint32ConvertHex+0x78>
		else
			charTxScanTaskStack[j++] = 55 + remainder; // A = 65;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	61b9      	str	r1, [r7, #24]
 80045bc:	4619      	mov	r1, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	440b      	add	r3, r1
 80045c2:	3237      	adds	r2, #55	; 0x37
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]
		quotient = quotient / 16;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	61fb      	str	r3, [r7, #28]
	while (quotient != 0)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1db      	bne.n	800458c <Uint32ConvertHex+0x3c>
	}
	end = j-1;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	613b      	str	r3, [r7, #16]
	for(reversal;reversal<(end/2)+1;reversal++){
 80045da:	e017      	b.n	800460c <Uint32ConvertHex+0xbc>
		reversalChar = charTxScanTaskStack[reversal];
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	4413      	add	r3, r2
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	73fb      	strb	r3, [r7, #15]
		charTxScanTaskStack[reversal] = charTxScanTaskStack[end];
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	441a      	add	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	440b      	add	r3, r1
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	701a      	strb	r2, [r3, #0]
		charTxScanTaskStack[end] = reversalChar;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	4413      	add	r3, r2
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	701a      	strb	r2, [r3, #0]
		end--;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	3b01      	subs	r3, #1
 8004604:	613b      	str	r3, [r7, #16]
	for(reversal;reversal<(end/2)+1;reversal++){
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	3301      	adds	r3, #1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	0fda      	lsrs	r2, r3, #31
 8004610:	4413      	add	r3, r2
 8004612:	105b      	asrs	r3, r3, #1
 8004614:	3301      	adds	r3, #1
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	429a      	cmp	r2, r3
 800461a:	dbdf      	blt.n	80045dc <Uint32ConvertHex+0x8c>
	}
	charTxScanTaskStack[j++] = 0;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	61ba      	str	r2, [r7, #24]
 8004622:	461a      	mov	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4413      	add	r3, r2
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
}
 800462c:	bf00      	nop
 800462e:	3724      	adds	r7, #36	; 0x24
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800463e:	2300      	movs	r3, #0
 8004640:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004642:	f000 fad1 	bl	8004be8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <xTimerCreateTimerTask+0x54>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <xTimerCreateTimerTask+0x58>)
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	2302      	movs	r3, #2
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800465c:	490d      	ldr	r1, [pc, #52]	; (8004694 <xTimerCreateTimerTask+0x5c>)
 800465e:	480e      	ldr	r0, [pc, #56]	; (8004698 <xTimerCreateTimerTask+0x60>)
 8004660:	f7fe fd6e 	bl	8003140 <xTaskCreate>
 8004664:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <xTimerCreateTimerTask+0x48>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	e7fe      	b.n	800467e <xTimerCreateTimerTask+0x46>
	return xReturn;
 8004680:	687b      	ldr	r3, [r7, #4]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000228 	.word	0x20000228
 8004690:	2000022c 	.word	0x2000022c
 8004694:	08005618 	.word	0x08005618
 8004698:	080047cd 	.word	0x080047cd

0800469c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	; 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <xTimerGenericCommand+0x2c>
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	623b      	str	r3, [r7, #32]
 80046c6:	e7fe      	b.n	80046c6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <xTimerGenericCommand+0x94>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02a      	beq.n	8004726 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b05      	cmp	r3, #5
 80046e0:	dc18      	bgt.n	8004714 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046e2:	f7ff fa9d 	bl	8003c20 <xTaskGetSchedulerState>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d109      	bne.n	8004700 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <xTimerGenericCommand+0x94>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	f107 0114 	add.w	r1, r7, #20
 80046f4:	2300      	movs	r3, #0
 80046f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f8:	f7fe f94c 	bl	8002994 <xQueueGenericSend>
 80046fc:	6278      	str	r0, [r7, #36]	; 0x24
 80046fe:	e012      	b.n	8004726 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <xTimerGenericCommand+0x94>)
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	f107 0114 	add.w	r1, r7, #20
 8004708:	2300      	movs	r3, #0
 800470a:	2200      	movs	r2, #0
 800470c:	f7fe f942 	bl	8002994 <xQueueGenericSend>
 8004710:	6278      	str	r0, [r7, #36]	; 0x24
 8004712:	e008      	b.n	8004726 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <xTimerGenericCommand+0x94>)
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	f107 0114 	add.w	r1, r7, #20
 800471c:	2300      	movs	r3, #0
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	f7fe fa32 	bl	8002b88 <xQueueGenericSendFromISR>
 8004724:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000228 	.word	0x20000228

08004734 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <prvProcessExpiredTimer+0x94>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3304      	adds	r3, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe f831 	bl	80027b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d021      	beq.n	80047a4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	18d1      	adds	r1, r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	6978      	ldr	r0, [r7, #20]
 800476e:	f000 f8d1 	bl	8004914 <prvInsertTimerInActiveList>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01e      	beq.n	80047b6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004778:	2300      	movs	r3, #0
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2300      	movs	r3, #0
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	2100      	movs	r1, #0
 8004782:	6978      	ldr	r0, [r7, #20]
 8004784:	f7ff ff8a 	bl	800469c <xTimerGenericCommand>
 8004788:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d112      	bne.n	80047b6 <prvProcessExpiredTimer+0x82>
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e7fe      	b.n	80047a2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	6978      	ldr	r0, [r7, #20]
 80047bc:	4798      	blx	r3
}
 80047be:	bf00      	nop
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000220 	.word	0x20000220

080047cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047d4:	f107 0308 	add.w	r3, r7, #8
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f857 	bl	800488c <prvGetNextExpireTime>
 80047de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4619      	mov	r1, r3
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f803 	bl	80047f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047ea:	f000 f8d5 	bl	8004998 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047ee:	e7f1      	b.n	80047d4 <prvTimerTask+0x8>

080047f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047fa:	f7fe fe5f 	bl	80034bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f866 	bl	80048d4 <prvSampleTimeNow>
 8004808:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d130      	bne.n	8004872 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <prvProcessTimerOrBlockTask+0x3c>
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	429a      	cmp	r2, r3
 800481c:	d806      	bhi.n	800482c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800481e:	f7fe fe5b 	bl	80034d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004822:	68f9      	ldr	r1, [r7, #12]
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ff85 	bl	8004734 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800482a:	e024      	b.n	8004876 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004832:	4b13      	ldr	r3, [pc, #76]	; (8004880 <prvProcessTimerOrBlockTask+0x90>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <prvProcessTimerOrBlockTask+0x50>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <prvProcessTimerOrBlockTask+0x52>
 8004840:	2300      	movs	r3, #0
 8004842:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <prvProcessTimerOrBlockTask+0x94>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4619      	mov	r1, r3
 8004852:	f7fe fc41 	bl	80030d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004856:	f7fe fe3f 	bl	80034d8 <xTaskResumeAll>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <prvProcessTimerOrBlockTask+0x98>)
 8004862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
}
 8004870:	e001      	b.n	8004876 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004872:	f7fe fe31 	bl	80034d8 <xTaskResumeAll>
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000224 	.word	0x20000224
 8004884:	20000228 	.word	0x20000228
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004894:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <prvGetNextExpireTime+0x44>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <prvGetNextExpireTime+0x16>
 800489e:	2201      	movs	r2, #1
 80048a0:	e000      	b.n	80048a4 <prvGetNextExpireTime+0x18>
 80048a2:	2200      	movs	r2, #0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <prvGetNextExpireTime+0x44>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e001      	b.n	80048c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048c0:	68fb      	ldr	r3, [r7, #12]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000220 	.word	0x20000220

080048d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048dc:	f7fe fe98 	bl	8003610 <xTaskGetTickCount>
 80048e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <prvSampleTimeNow+0x3c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d205      	bcs.n	80048f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048ec:	f000 f918 	bl	8004b20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e002      	b.n	80048fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048fe:	4a04      	ldr	r2, [pc, #16]	; (8004910 <prvSampleTimeNow+0x3c>)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004904:	68fb      	ldr	r3, [r7, #12]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000230 	.word	0x20000230

08004914 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d812      	bhi.n	8004960 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e01b      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <prvInsertTimerInActiveList+0x7c>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7fd fef2 	bl	8002742 <vListInsert>
 800495e:	e012      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d206      	bcs.n	8004976 <prvInsertTimerInActiveList+0x62>
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e007      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004976:	4b07      	ldr	r3, [pc, #28]	; (8004994 <prvInsertTimerInActiveList+0x80>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f7fd fede 	bl	8002742 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004986:	697b      	ldr	r3, [r7, #20]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000224 	.word	0x20000224
 8004994:	20000220 	.word	0x20000220

08004998 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08c      	sub	sp, #48	; 0x30
 800499c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800499e:	e0ac      	b.n	8004afa <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f2c0 80a8 	blt.w	8004af8 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	3304      	adds	r3, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fd fefb 	bl	80027b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff87 	bl	80048d4 <prvSampleTimeNow>
 80049c6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b09      	cmp	r3, #9
 80049cc:	f200 8095 	bhi.w	8004afa <prvProcessReceivedCommands+0x162>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <prvProcessReceivedCommands+0x40>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	08004a01 	.word	0x08004a01
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a01 	.word	0x08004a01
 80049e4:	08004a73 	.word	0x08004a73
 80049e8:	08004a87 	.word	0x08004a87
 80049ec:	08004acf 	.word	0x08004acf
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a01 	.word	0x08004a01
 80049f8:	08004a73 	.word	0x08004a73
 80049fc:	08004a87 	.word	0x08004a87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	18d1      	adds	r1, r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a3a      	ldr	r2, [r7, #32]
 8004a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a20:	f7ff ff78 	bl	8004914 <prvInsertTimerInActiveList>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d067      	beq.n	8004afa <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d05c      	beq.n	8004afa <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	441a      	add	r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a52:	f7ff fe23 	bl	800469c <xTimerGenericCommand>
 8004a56:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d14d      	bne.n	8004afa <prvProcessReceivedCommands+0x162>
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	e7fe      	b.n	8004a70 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a84:	e039      	b.n	8004afa <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <prvProcessReceivedCommands+0x122>
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e7fe      	b.n	8004ab8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	18d1      	adds	r1, r2, r3
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ac8:	f7ff ff24 	bl	8004914 <prvInsertTimerInActiveList>
					break;
 8004acc:	e015      	b.n	8004afa <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ade:	f000 fbc9 	bl	8005274 <vPortFree>
 8004ae2:	e00a      	b.n	8004afa <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004af6:	e000      	b.n	8004afa <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004af8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <prvProcessReceivedCommands+0x184>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f107 0108 	add.w	r1, r7, #8
 8004b02:	2200      	movs	r2, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fe f8d3 	bl	8002cb0 <xQueueReceive>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f47f af47 	bne.w	80049a0 <prvProcessReceivedCommands+0x8>
	}
}
 8004b12:	bf00      	nop
 8004b14:	3728      	adds	r7, #40	; 0x28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000228 	.word	0x20000228

08004b20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b26:	e047      	b.n	8004bb8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b28:	4b2d      	ldr	r3, [pc, #180]	; (8004be0 <prvSwitchTimerLists+0xc0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b32:	4b2b      	ldr	r3, [pc, #172]	; (8004be0 <prvSwitchTimerLists+0xc0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd fe37 	bl	80027b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d02d      	beq.n	8004bb8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d90e      	bls.n	8004b8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b7a:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <prvSwitchTimerLists+0xc0>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4610      	mov	r0, r2
 8004b86:	f7fd fddc 	bl	8002742 <vListInsert>
 8004b8a:	e015      	b.n	8004bb8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2300      	movs	r3, #0
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	2100      	movs	r1, #0
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fd80 	bl	800469c <xTimerGenericCommand>
 8004b9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <prvSwitchTimerLists+0x98>
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	e7fe      	b.n	8004bb6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bb8:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <prvSwitchTimerLists+0xc0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1b2      	bne.n	8004b28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <prvSwitchTimerLists+0xc0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <prvSwitchTimerLists+0xc4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <prvSwitchTimerLists+0xc0>)
 8004bce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bd0:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <prvSwitchTimerLists+0xc4>)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	6013      	str	r3, [r2, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000220 	.word	0x20000220
 8004be4:	20000224 	.word	0x20000224

08004be8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bec:	f000 f966 	bl	8004ebc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <prvCheckForValidListAndQueue+0x54>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d11d      	bne.n	8004c34 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bf8:	4811      	ldr	r0, [pc, #68]	; (8004c40 <prvCheckForValidListAndQueue+0x58>)
 8004bfa:	f7fd fd51 	bl	80026a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bfe:	4811      	ldr	r0, [pc, #68]	; (8004c44 <prvCheckForValidListAndQueue+0x5c>)
 8004c00:	f7fd fd4e 	bl	80026a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <prvCheckForValidListAndQueue+0x60>)
 8004c06:	4a0e      	ldr	r2, [pc, #56]	; (8004c40 <prvCheckForValidListAndQueue+0x58>)
 8004c08:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c0a:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <prvCheckForValidListAndQueue+0x64>)
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	; (8004c44 <prvCheckForValidListAndQueue+0x5c>)
 8004c0e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004c10:	2200      	movs	r2, #0
 8004c12:	210c      	movs	r1, #12
 8004c14:	200a      	movs	r0, #10
 8004c16:	f7fd fe5f 	bl	80028d8 <xQueueGenericCreate>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <prvCheckForValidListAndQueue+0x54>)
 8004c1e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <prvCheckForValidListAndQueue+0x54>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <prvCheckForValidListAndQueue+0x54>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4908      	ldr	r1, [pc, #32]	; (8004c50 <prvCheckForValidListAndQueue+0x68>)
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fa2a 	bl	8003088 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c34:	f000 f970 	bl	8004f18 <vPortExitCritical>
}
 8004c38:	bf00      	nop
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20000228 	.word	0x20000228
 8004c40:	200001f8 	.word	0x200001f8
 8004c44:	2000020c 	.word	0x2000020c
 8004c48:	20000220 	.word	0x20000220
 8004c4c:	20000224 	.word	0x20000224
 8004c50:	08005620 	.word	0x08005620

08004c54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3b04      	subs	r3, #4
 8004c64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3b04      	subs	r3, #4
 8004c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3b04      	subs	r3, #4
 8004c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c84:	4a0c      	ldr	r2, [pc, #48]	; (8004cb8 <pxPortInitialiseStack+0x64>)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b14      	subs	r3, #20
 8004c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b04      	subs	r3, #4
 8004c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f06f 0202 	mvn.w	r2, #2
 8004ca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3b20      	subs	r3, #32
 8004ca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004caa:	68fb      	ldr	r3, [r7, #12]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	08004cbd 	.word	0x08004cbd

08004cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <prvTaskExitError+0x50>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d009      	beq.n	8004ce4 <prvTaskExitError+0x28>
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	e7fe      	b.n	8004ce2 <prvTaskExitError+0x26>
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cf6:	bf00      	nop
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0fc      	beq.n	8004cf8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	2000000c 	.word	0x2000000c

08004d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <pxCurrentTCBConst2>)
 8004d12:	6819      	ldr	r1, [r3, #0]
 8004d14:	6808      	ldr	r0, [r1, #0]
 8004d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1a:	f380 8809 	msr	PSP, r0
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f04f 0000 	mov.w	r0, #0
 8004d26:	f380 8811 	msr	BASEPRI, r0
 8004d2a:	4770      	bx	lr
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst2>:
 8004d30:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d38:	4808      	ldr	r0, [pc, #32]	; (8004d5c <prvPortStartFirstTask+0x24>)
 8004d3a:	6800      	ldr	r0, [r0, #0]
 8004d3c:	6800      	ldr	r0, [r0, #0]
 8004d3e:	f380 8808 	msr	MSP, r0
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8814 	msr	CONTROL, r0
 8004d4a:	b662      	cpsie	i
 8004d4c:	b661      	cpsie	f
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	df00      	svc	0
 8004d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d5a:	bf00      	nop
 8004d5c:	e000ed08 	.word	0xe000ed08

08004d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d66:	4b4c      	ldr	r3, [pc, #304]	; (8004e98 <xPortStartScheduler+0x138>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a4c      	ldr	r2, [pc, #304]	; (8004e9c <xPortStartScheduler+0x13c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d109      	bne.n	8004d84 <xPortStartScheduler+0x24>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e7fe      	b.n	8004d82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d84:	4b44      	ldr	r3, [pc, #272]	; (8004e98 <xPortStartScheduler+0x138>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a45      	ldr	r2, [pc, #276]	; (8004ea0 <xPortStartScheduler+0x140>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d109      	bne.n	8004da2 <xPortStartScheduler+0x42>
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e7fe      	b.n	8004da0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004da2:	4b40      	ldr	r3, [pc, #256]	; (8004ea4 <xPortStartScheduler+0x144>)
 8004da4:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	22ff      	movs	r2, #255	; 0xff
 8004db2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4b38      	ldr	r3, [pc, #224]	; (8004ea8 <xPortStartScheduler+0x148>)
 8004dc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dca:	4b38      	ldr	r3, [pc, #224]	; (8004eac <xPortStartScheduler+0x14c>)
 8004dcc:	2207      	movs	r2, #7
 8004dce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dd0:	e009      	b.n	8004de6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004dd2:	4b36      	ldr	r3, [pc, #216]	; (8004eac <xPortStartScheduler+0x14c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	4a34      	ldr	r2, [pc, #208]	; (8004eac <xPortStartScheduler+0x14c>)
 8004dda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b80      	cmp	r3, #128	; 0x80
 8004df0:	d0ef      	beq.n	8004dd2 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004df2:	4b2e      	ldr	r3, [pc, #184]	; (8004eac <xPortStartScheduler+0x14c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1c3 0307 	rsb	r3, r3, #7
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d009      	beq.n	8004e12 <xPortStartScheduler+0xb2>
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	e7fe      	b.n	8004e10 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e12:	4b26      	ldr	r3, [pc, #152]	; (8004eac <xPortStartScheduler+0x14c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f1c3 0307 	rsb	r3, r3, #7
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d009      	beq.n	8004e32 <xPortStartScheduler+0xd2>
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e7fe      	b.n	8004e30 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e32:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <xPortStartScheduler+0x14c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <xPortStartScheduler+0x14c>)
 8004e3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <xPortStartScheduler+0x14c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <xPortStartScheduler+0x14c>)
 8004e46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e50:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <xPortStartScheduler+0x150>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <xPortStartScheduler+0x150>)
 8004e56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <xPortStartScheduler+0x150>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <xPortStartScheduler+0x150>)
 8004e62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e68:	f000 f8d6 	bl	8005018 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <xPortStartScheduler+0x154>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e72:	f000 f8f5 	bl	8005060 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <xPortStartScheduler+0x158>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a0f      	ldr	r2, [pc, #60]	; (8004eb8 <xPortStartScheduler+0x158>)
 8004e7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e82:	f7ff ff59 	bl	8004d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e86:	f7fe fc8b 	bl	80037a0 <vTaskSwitchContext>
	prvTaskExitError();
 8004e8a:	f7ff ff17 	bl	8004cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed00 	.word	0xe000ed00
 8004e9c:	410fc271 	.word	0x410fc271
 8004ea0:	410fc270 	.word	0x410fc270
 8004ea4:	e000e400 	.word	0xe000e400
 8004ea8:	20000234 	.word	0x20000234
 8004eac:	20000238 	.word	0x20000238
 8004eb0:	e000ed20 	.word	0xe000ed20
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	e000ef34 	.word	0xe000ef34

08004ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <vPortEnterCritical+0x54>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	4a0d      	ldr	r2, [pc, #52]	; (8004f10 <vPortEnterCritical+0x54>)
 8004edc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <vPortEnterCritical+0x54>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d10e      	bne.n	8004f04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <vPortEnterCritical+0x58>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <vPortEnterCritical+0x48>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	e7fe      	b.n	8004f02 <vPortEnterCritical+0x46>
	}
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	2000000c 	.word	0x2000000c
 8004f14:	e000ed04 	.word	0xe000ed04

08004f18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <vPortExitCritical+0x4c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <vPortExitCritical+0x22>
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	e7fe      	b.n	8004f38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <vPortExitCritical+0x4c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	4a08      	ldr	r2, [pc, #32]	; (8004f64 <vPortExitCritical+0x4c>)
 8004f42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f44:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <vPortExitCritical+0x4c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <vPortExitCritical+0x3e>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	2000000c 	.word	0x2000000c
	...

08004f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f70:	f3ef 8009 	mrs	r0, PSP
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <pxCurrentTCBConst>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	f01e 0f10 	tst.w	lr, #16
 8004f80:	bf08      	it	eq
 8004f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8a:	6010      	str	r0, [r2, #0]
 8004f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f94:	f380 8811 	msr	BASEPRI, r0
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f7fe fbfe 	bl	80037a0 <vTaskSwitchContext>
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	f380 8811 	msr	BASEPRI, r0
 8004fac:	bc09      	pop	{r0, r3}
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	6808      	ldr	r0, [r1, #0]
 8004fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb6:	f01e 0f10 	tst.w	lr, #16
 8004fba:	bf08      	it	eq
 8004fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fc0:	f380 8809 	msr	PSP, r0
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst>:
 8004fd0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ff0:	f7fe fb1e 	bl	8003630 <xTaskIncrementTick>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <SysTick_Handler+0x3c>)
 8004ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <vPortSetupTimerInterrupt+0x34>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <vPortSetupTimerInterrupt+0x38>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <vPortSetupTimerInterrupt+0x3c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <vPortSetupTimerInterrupt+0x40>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	099b      	lsrs	r3, r3, #6
 8005034:	4a09      	ldr	r2, [pc, #36]	; (800505c <vPortSetupTimerInterrupt+0x44>)
 8005036:	3b01      	subs	r3, #1
 8005038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800503a:	4b04      	ldr	r3, [pc, #16]	; (800504c <vPortSetupTimerInterrupt+0x34>)
 800503c:	2207      	movs	r2, #7
 800503e:	601a      	str	r2, [r3, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	e000e010 	.word	0xe000e010
 8005050:	e000e018 	.word	0xe000e018
 8005054:	20000000 	.word	0x20000000
 8005058:	10624dd3 	.word	0x10624dd3
 800505c:	e000e014 	.word	0xe000e014

08005060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005060:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005070 <vPortEnableVFP+0x10>
 8005064:	6801      	ldr	r1, [r0, #0]
 8005066:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800506a:	6001      	str	r1, [r0, #0]
 800506c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800506e:	bf00      	nop
 8005070:	e000ed88 	.word	0xe000ed88

08005074 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800507a:	f3ef 8305 	mrs	r3, IPSR
 800507e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b0f      	cmp	r3, #15
 8005084:	d913      	bls.n	80050ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <vPortValidateInterruptPriority+0x6c>)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005090:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <vPortValidateInterruptPriority+0x70>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	7afa      	ldrb	r2, [r7, #11]
 8005096:	429a      	cmp	r2, r3
 8005098:	d209      	bcs.n	80050ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	e7fe      	b.n	80050ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <vPortValidateInterruptPriority+0x74>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <vPortValidateInterruptPriority+0x78>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d909      	bls.n	80050d2 <vPortValidateInterruptPriority+0x5e>
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	e7fe      	b.n	80050d0 <vPortValidateInterruptPriority+0x5c>
	}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e3f0 	.word	0xe000e3f0
 80050e4:	20000234 	.word	0x20000234
 80050e8:	e000ed0c 	.word	0xe000ed0c
 80050ec:	20000238 	.word	0x20000238

080050f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050fc:	f7fe f9de 	bl	80034bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005100:	4b57      	ldr	r3, [pc, #348]	; (8005260 <pvPortMalloc+0x170>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005108:	f000 f90c 	bl	8005324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800510c:	4b55      	ldr	r3, [pc, #340]	; (8005264 <pvPortMalloc+0x174>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	f040 808c 	bne.w	8005232 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01c      	beq.n	800515a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005120:	2208      	movs	r2, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	2b00      	cmp	r3, #0
 8005130:	d013      	beq.n	800515a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f023 0307 	bic.w	r3, r3, #7
 8005138:	3308      	adds	r3, #8
 800513a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <pvPortMalloc+0x6a>
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	e7fe      	b.n	8005158 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d068      	beq.n	8005232 <pvPortMalloc+0x142>
 8005160:	4b41      	ldr	r3, [pc, #260]	; (8005268 <pvPortMalloc+0x178>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	429a      	cmp	r2, r3
 8005168:	d863      	bhi.n	8005232 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800516a:	4b40      	ldr	r3, [pc, #256]	; (800526c <pvPortMalloc+0x17c>)
 800516c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800516e:	4b3f      	ldr	r3, [pc, #252]	; (800526c <pvPortMalloc+0x17c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005174:	e004      	b.n	8005180 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	429a      	cmp	r2, r3
 8005188:	d903      	bls.n	8005192 <pvPortMalloc+0xa2>
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f1      	bne.n	8005176 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005192:	4b33      	ldr	r3, [pc, #204]	; (8005260 <pvPortMalloc+0x170>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005198:	429a      	cmp	r2, r3
 800519a:	d04a      	beq.n	8005232 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2208      	movs	r2, #8
 80051a2:	4413      	add	r3, r2
 80051a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	1ad2      	subs	r2, r2, r3
 80051b6:	2308      	movs	r3, #8
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d91e      	bls.n	80051fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <pvPortMalloc+0xf4>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	e7fe      	b.n	80051e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051f6:	69b8      	ldr	r0, [r7, #24]
 80051f8:	f000 f8f6 	bl	80053e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051fc:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <pvPortMalloc+0x178>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	4a18      	ldr	r2, [pc, #96]	; (8005268 <pvPortMalloc+0x178>)
 8005208:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800520a:	4b17      	ldr	r3, [pc, #92]	; (8005268 <pvPortMalloc+0x178>)
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4b18      	ldr	r3, [pc, #96]	; (8005270 <pvPortMalloc+0x180>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d203      	bcs.n	800521e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005216:	4b14      	ldr	r3, [pc, #80]	; (8005268 <pvPortMalloc+0x178>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a15      	ldr	r2, [pc, #84]	; (8005270 <pvPortMalloc+0x180>)
 800521c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <pvPortMalloc+0x174>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	431a      	orrs	r2, r3
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005232:	f7fe f951 	bl	80034d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <pvPortMalloc+0x164>
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e7fe      	b.n	8005252 <pvPortMalloc+0x162>
	return pvReturn;
 8005254:	69fb      	ldr	r3, [r7, #28]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3728      	adds	r7, #40	; 0x28
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20012e44 	.word	0x20012e44
 8005264:	20012e50 	.word	0x20012e50
 8005268:	20012e48 	.word	0x20012e48
 800526c:	20012e3c 	.word	0x20012e3c
 8005270:	20012e4c 	.word	0x20012e4c

08005274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d046      	beq.n	8005314 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005286:	2308      	movs	r3, #8
 8005288:	425b      	negs	r3, r3
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4413      	add	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	4b20      	ldr	r3, [pc, #128]	; (800531c <vPortFree+0xa8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4013      	ands	r3, r2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <vPortFree+0x42>
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e7fe      	b.n	80052b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <vPortFree+0x5e>
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	e7fe      	b.n	80052d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	4b11      	ldr	r3, [pc, #68]	; (800531c <vPortFree+0xa8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d019      	beq.n	8005314 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d115      	bne.n	8005314 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <vPortFree+0xa8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	401a      	ands	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052f8:	f7fe f8e0 	bl	80034bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <vPortFree+0xac>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4413      	add	r3, r2
 8005306:	4a06      	ldr	r2, [pc, #24]	; (8005320 <vPortFree+0xac>)
 8005308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800530a:	6938      	ldr	r0, [r7, #16]
 800530c:	f000 f86c 	bl	80053e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005310:	f7fe f8e2 	bl	80034d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005314:	bf00      	nop
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20012e50 	.word	0x20012e50
 8005320:	20012e48 	.word	0x20012e48

08005324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800532a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800532e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <prvHeapInit+0xac>)
 8005332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3307      	adds	r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <prvHeapInit+0xac>)
 8005354:	4413      	add	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800535c:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <prvHeapInit+0xb0>)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005362:	4b1c      	ldr	r3, [pc, #112]	; (80053d4 <prvHeapInit+0xb0>)
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4413      	add	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005370:	2208      	movs	r2, #8
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0307 	bic.w	r3, r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <prvHeapInit+0xb4>)
 8005384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <prvHeapInit+0xb4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <prvHeapInit+0xb4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053a4:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <prvHeapInit+0xb4>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <prvHeapInit+0xb8>)
 80053b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <prvHeapInit+0xbc>)
 80053ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <prvHeapInit+0xc0>)
 80053be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	2000023c 	.word	0x2000023c
 80053d4:	20012e3c 	.word	0x20012e3c
 80053d8:	20012e44 	.word	0x20012e44
 80053dc:	20012e4c 	.word	0x20012e4c
 80053e0:	20012e48 	.word	0x20012e48
 80053e4:	20012e50 	.word	0x20012e50

080053e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053f0:	4b28      	ldr	r3, [pc, #160]	; (8005494 <prvInsertBlockIntoFreeList+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e002      	b.n	80053fc <prvInsertBlockIntoFreeList+0x14>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	429a      	cmp	r2, r3
 8005404:	d8f7      	bhi.n	80053f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4413      	add	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d108      	bne.n	800542a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	441a      	add	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d118      	bne.n	8005470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <prvInsertBlockIntoFreeList+0xb0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d00d      	beq.n	8005466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	441a      	add	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e008      	b.n	8005478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvInsertBlockIntoFreeList+0xb0>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e003      	b.n	8005478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d002      	beq.n	8005486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20012e3c 	.word	0x20012e3c
 8005498:	20012e44 	.word	0x20012e44

0800549c <__libc_init_array>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	4e0d      	ldr	r6, [pc, #52]	; (80054d4 <__libc_init_array+0x38>)
 80054a0:	4c0d      	ldr	r4, [pc, #52]	; (80054d8 <__libc_init_array+0x3c>)
 80054a2:	1ba4      	subs	r4, r4, r6
 80054a4:	10a4      	asrs	r4, r4, #2
 80054a6:	2500      	movs	r5, #0
 80054a8:	42a5      	cmp	r5, r4
 80054aa:	d109      	bne.n	80054c0 <__libc_init_array+0x24>
 80054ac:	4e0b      	ldr	r6, [pc, #44]	; (80054dc <__libc_init_array+0x40>)
 80054ae:	4c0c      	ldr	r4, [pc, #48]	; (80054e0 <__libc_init_array+0x44>)
 80054b0:	f000 f850 	bl	8005554 <_init>
 80054b4:	1ba4      	subs	r4, r4, r6
 80054b6:	10a4      	asrs	r4, r4, #2
 80054b8:	2500      	movs	r5, #0
 80054ba:	42a5      	cmp	r5, r4
 80054bc:	d105      	bne.n	80054ca <__libc_init_array+0x2e>
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054c4:	4798      	blx	r3
 80054c6:	3501      	adds	r5, #1
 80054c8:	e7ee      	b.n	80054a8 <__libc_init_array+0xc>
 80054ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054ce:	4798      	blx	r3
 80054d0:	3501      	adds	r5, #1
 80054d2:	e7f2      	b.n	80054ba <__libc_init_array+0x1e>
 80054d4:	08005648 	.word	0x08005648
 80054d8:	08005648 	.word	0x08005648
 80054dc:	08005648 	.word	0x08005648
 80054e0:	0800564c 	.word	0x0800564c

080054e4 <memcpy>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	1e43      	subs	r3, r0, #1
 80054e8:	440a      	add	r2, r1
 80054ea:	4291      	cmp	r1, r2
 80054ec:	d100      	bne.n	80054f0 <memcpy+0xc>
 80054ee:	bd10      	pop	{r4, pc}
 80054f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054f8:	e7f7      	b.n	80054ea <memcpy+0x6>

080054fa <memset>:
 80054fa:	4402      	add	r2, r0
 80054fc:	4603      	mov	r3, r0
 80054fe:	4293      	cmp	r3, r2
 8005500:	d100      	bne.n	8005504 <memset+0xa>
 8005502:	4770      	bx	lr
 8005504:	f803 1b01 	strb.w	r1, [r3], #1
 8005508:	e7f9      	b.n	80054fe <memset+0x4>

0800550a <strcat>:
 800550a:	b510      	push	{r4, lr}
 800550c:	4603      	mov	r3, r0
 800550e:	781a      	ldrb	r2, [r3, #0]
 8005510:	1c5c      	adds	r4, r3, #1
 8005512:	b93a      	cbnz	r2, 8005524 <strcat+0x1a>
 8005514:	3b01      	subs	r3, #1
 8005516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800551a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800551e:	2a00      	cmp	r2, #0
 8005520:	d1f9      	bne.n	8005516 <strcat+0xc>
 8005522:	bd10      	pop	{r4, pc}
 8005524:	4623      	mov	r3, r4
 8005526:	e7f2      	b.n	800550e <strcat+0x4>

08005528 <strncpy>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	3901      	subs	r1, #1
 800552c:	4604      	mov	r4, r0
 800552e:	b902      	cbnz	r2, 8005532 <strncpy+0xa>
 8005530:	bd70      	pop	{r4, r5, r6, pc}
 8005532:	4623      	mov	r3, r4
 8005534:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005538:	f803 5b01 	strb.w	r5, [r3], #1
 800553c:	1e56      	subs	r6, r2, #1
 800553e:	b92d      	cbnz	r5, 800554c <strncpy+0x24>
 8005540:	4414      	add	r4, r2
 8005542:	42a3      	cmp	r3, r4
 8005544:	d0f4      	beq.n	8005530 <strncpy+0x8>
 8005546:	f803 5b01 	strb.w	r5, [r3], #1
 800554a:	e7fa      	b.n	8005542 <strncpy+0x1a>
 800554c:	461c      	mov	r4, r3
 800554e:	4632      	mov	r2, r6
 8005550:	e7ed      	b.n	800552e <strncpy+0x6>
	...

08005554 <_init>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	bf00      	nop
 8005558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555a:	bc08      	pop	{r3}
 800555c:	469e      	mov	lr, r3
 800555e:	4770      	bx	lr

08005560 <_fini>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr
